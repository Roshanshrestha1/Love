 
    // Language translations
    const translations = {
      en: {
        headerSubtitle: "A love story written in the stars тЬи",
        timerSubtitle: "ЁЯХ░я╕П Time since my heart started waiting for you",
        calculatorTitle: "ЁЯТХ Love Calculator ЁЯТХ",
        calculatorButton: "Calculate Love ЁЯТХ",
        name1Placeholder: "Enter first name",
        name2Placeholder: "Enter second name",
        quotesTitle: "ЁЯТн Love Quotes ЁЯТн",
        letterTitle: "ЁЯТМ Click the Letter ЁЯТМ",
        letterHeader: "ЁЯТЦ Letter From My Heart ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ Our Beautiful Memories",
        uploadTitle: "ЁЯУ╖ Add More Memories",
        uploadSubtitle: "Share more beautiful moments with us",
        uploadBtnText: "Upload Photos",
        footerText: "тЬи Made with infinite тЭдя╕П тАФ I'll wait one day longer than forever. тЬи",
        letterText: `
Mearo mutu ko preaya manxe, ЁЯЦдЁЯТМ
Timro lagi yeauta sano letter cha, padhi deau na haii.

Jiban yeauta kitab ho re haii. ЁЯУЦ Jiban ma dheari kura haru kheaile ramro pani hunxa ra naramro pani hunxa tha xaina. Jaba kitab ko pana paltina thalxa, taba harek kura paribartan hudo raixa. Sabai paribartan ramro hunxa vanne ta hudina, tara khei paribartan yeasto hunxa jun lai suwikar garna garo hundo raixa. ЁЯШФ Samaya pani kasto chiz ho! тП│ Kheiile kuni kura lai aafo nagik le ra aauxa, tadha lai janxa. Samaya lai bhujna na sake ne raixa.

Mai le socheko theya jiban temi sangha bitau la vane, tara samaya ra mearo pagalpan le aaja tadha lera gayo. ЁЯШв Timi lai mai le ha rai sake tha xaina malai tyo samaya ma k vaya ko.

Mearo priya manxe, mearo mutu ko tura ЁЯТЦ, sanu vanne aadhikar ta xaina aaba ma sangha. Ho, ma manxe sayad tem le ma jasto pagal lai maya garnu hudina theyo. Mai le timro life nai lai aandhakar ma lagi dea, temi lai khusi deau la socheko theya, tara ma pagal le tem lai dhulka matra diya. ЁЯТФ Timi hasna cha han theyaou, tara mai le timro yeakha ma aasu le ra aai diya. ЁЯШвЁЯТз

Hajur, galti gare aaja ma mahasus gardai xu. Timi le j gareyou, tyo temi le thik gareyou, kina vane yeadi timro thau ma ma vayako vaya pani teai gartheya hola. Ma aabuz kuni kura na bhujne manxe tha xaina. Jindagai le ma jasto na ramro naxe lai temi sangha kina vet garako hola haii. Mai le ta tem lai dhuka mantra diaya, kheiile ne bhuje na timro aawasta, timro halat tha xaina. ЁЯШФ Ma yeasto kina vaya ma cha hanxu, ke yo duniya chhode ra jau, tara har yeak choti parsh pani gareko ho, tara pani kune kura le roak xa mali.

Mai le khei pani ramro gareko chaina, sadhai na ramro gareko. Ma lai tha xaina ma tyo maxe kina banna puge jun ma the ya na, sabai kura sochda lagxa aaja pani ma theai na ramro maxe xu. Ma lai tha xaina ma yo k leak dai xu, tara pani yo leak dai xu vannu kura ta hajaru xa. Mafi magnu xa, tara tha xaina ma kuni mafi ko layeak ko manxe hoina. Ma lai mafi na gar deau haii, mai le dheari-dheari na ramro gareko xu. Teasko punishment paai ra xa, xu, mai le tem lai ruwa ko, tem lai naramro gareko. ЁЯШнЁЯТФ

Ma dheari kura vanan cha han xu, tara sayad sunna cha ha dai nau, kina vane ma na ramro maxe ho. Ne ta sochda lagxa hijo jasto, tara maina maina gare barsha bitna lagi sake xa. ЁЯМзя╕П

Ma aafi sangha yeauta prashna xa: yeadi mai le maya gareko xain vannu vane aaja yeati din bit ta temi lai brishan sake na ra sakdina pani, jiban bhar parkhi basne xu. Ma timi lai tra ma tyo samaya ma kina teasto na ramro vaya k vaya ko bela-bela lagxa. Ma sachi nai pagal. ЁЯТМЁЯТФ

Kheiile khai man dhuk do raixa, aane temi lai tadha bata heri bas xu. Ma mafi gar deau haii, tha xaina. Timi yo juni ma mearo hunxau ke nai, tara ma parkhai garne xu. тП│ЁЯТЦ

Tara samaya le sabi kura lai yeak arka bata tadha gariraixa. Aaja ko yo din kasto kasto lagi ra ko xa, kina mearo man bhari xa, kina mearo yeakha bata aasu sadhai gharxan. ЁЯШв Sayad mai le deko tem lai dhuka le hola, ma yo punishment lai vok na tayar xu.

Sak xau vane ek choti feari mearo jindagi ma aau naтАФyo mutu le timro nam chhodna sakdaina. ЁЯе║ЁЯдН
Ma timi lai samjhiraheko chu. ЁЯТМ

Antim Sabdha,
         aafno kheal gara, aafno jiban ma aagi badha, timro model banne sapana pura gara. ЁЯМЯ Sayad aaba Dashai aauxai xa haii, mearo tarfa bata pani Happy Dashai xa. ЁЯОЙЁЯкФ
Aaru ta khei vannu xaian, aafo ra aafno pariwar ko kheal gara. ЁЯПбЁЯТЫ
    
`
      },
      np: {
        headerSubtitle: "рддрд╛рд░рд╛рд╣рд░реВрдорд╛ рд▓реЗрдЦрд┐рдПрдХреЛ рдкреНрд░реЗрдо рдХрдерд╛ тЬи",
        timerSubtitle: "ЁЯХ░я╕П рдореЗрд░реЛ рдореБрдЯреБрд▓реЗ рддрдкрд╛рдИрдВрдХреЛ рд▓рд╛рдЧрд┐ рдХрддрд┐ рд╕рдордп рдХреБрд░реНрдиреБрднрдПрдХреЛ рдЫ",
        letterTitle: "ЁЯТМ рдЪрд┐рдареАрдорд╛ рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН ЁЯТМ",
        letterHeader: "ЁЯТЦ рдореЗрд░реЛ рдореБрдЯреБрдмрд╛рдЯ рдЪрд┐рдареА ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ рд╣рд╛рдореНрд░реЛ рд╕реБрдиреНрджрд░ рд╕рдореНрдЭрдирд╛рд╣рд░реВ",
        uploadTitle: "ЁЯУ╖ рдердк рд╕рдореНрдЭрдирд╛рд╣рд░реВ рдердкреНрдиреБрд╣реЛрд╕реН",
        uploadSubtitle: "рд╣рд╛рдореАрд╕рдБрдЧ рдердк рд╕реБрдиреНрджрд░ рдХреНрд╖рдгрд╣рд░реВ рд╕рд╛рдЭрд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        uploadBtnText: "рддрд╕реНрд╡рд┐рд░рд╣рд░реВ рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        footerText: "тЬи рдЕрд╕реАрдорд┐рдд тЭдя╕П рд╕рдБрдЧ рдмрдирд╛рдЗрдПрдХреЛ тАФ рдо рдПрдХ рджрд┐рди рдзреЗрд░реИ рд▓рд╛рдореЛ рдХреБрд░реНрдиреЗрдЫреБред тЬи",
        letterText: `ЁЯР╝ЁЯжЬЁЯМ╣ рдо рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЕрдЭреИ рдкрдирд┐ рдореБрдЯреБ рднрд░реА рдорд╛рдпрд╛ рдЧрд░реНрдЫреБред
рддрдкрд╛рдИрдВ рдореЗрд░реЛ рд╕рдВрд╕рд╛рд░ рд╣реБрдиреБрд╣реБрдиреНрдЫ...
ЁЯЩП рдореИрд▓реЗ рдЧрд░реЗрдХрд╛ рд╕рдмреИ рдЧрд▓реНрддреАрд╣рд░реВрдХреЛ рд▓рд╛рдЧрд┐ рдо рд╣реГрджрдпрдмрд╛рдЯ рдорд╛рдл рдорд╛рдЧреНрдЫреБред
рдо рддрдкрд╛рдИрдВрдХреЛ рдЦреБрд╢реАрдорд╛ рдЦреБрд╢реА рдордирд╛рддрд╛ рд╣реВрдБ...
ЁЯХпя╕П рдо рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЬрд╕реНрддреЛ рдорд╛рдпрд╛ рдЧрд░реНрди рд╕рдХреНрдЫреБ...
ЁЯТЦ рдо рдЪрд╛рд╣рдиреНрдЫреБ рдПрдХ рджрд┐рди рддрдкрд╛рдИрдВ рдлрд░реНрдХрд┐рдиреБрд╣реБрдиреНрдЫ...

рдореЗрд░реЛ рд╕рдореНрдкреВрд░реНрдг рд╣реГрджрдпрдмрд╛рдЯ,
рддрдкрд╛рдИрдВрдХреЛ рд╕рджрд╛рдХреЛ рдорд╛рдпрд╛рд▓реБ рдкрддрд┐ ЁЯТСЁЯСлЁЯТНЁЯТЦтЬитЭдя╕ПЁЯМ╣ЁЯМЩЁЯХКя╕ПЁЯТМ`
      },
      hi: {
        headerSubtitle: "рддрд╛рд░реЛрдВ рдореЗрдВ рд▓рд┐рдЦреА рдЧрдИ рдкреНрд░реЗрдо рдХрд╣рд╛рдиреА тЬи",
        timerSubtitle: "ЁЯХ░я╕П рдореЗрд░реЗ рджрд┐рд▓ рдиреЗ рдЖрдкрдХреЗ рд▓рд┐рдП рдХрд┐рддрдирд╛ рд╕рдордп рдЗрдВрддрдЬрд╛рд░ рдХрд┐рдпрд╛ рд╣реИ",
        letterTitle: "ЁЯТМ рдкрддреНрд░ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ ЁЯТМ",
        letterHeader: "ЁЯТЦ рдореЗрд░реЗ рджрд┐рд▓ рд╕реЗ рдкрддреНрд░ ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ рд╣рдорд╛рд░реА рд╕реБрдВрджрд░ рдпрд╛рджреЗрдВ",
        uploadTitle: "ЁЯУ╖ рдФрд░ рдпрд╛рджреЗрдВ рдЬреЛрдбрд╝реЗрдВ",
        uploadSubtitle: "рд╣рдорд╛рд░реЗ рд╕рд╛рде рдФрд░ рд╕реБрдВрджрд░ рдкрд▓ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ",
        uploadBtnText: "рддрд╕реНрд╡реАрд░реЗрдВ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        footerText: "тЬи рдЕрд╕реАрдорд┐рдд тЭдя╕П рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛ тАФ рдореИрдВ рдПрдХ рджрд┐рди рдФрд░ рд▓рдВрдмрд╛ рдЗрдВрддрдЬрд╛рд░ рдХрд░реВрдВрдЧрд╛ред тЬи",
        letterText: `ЁЯР╝ЁЯжЬЁЯМ╣ рдореИрдВ рдЖрдкрд╕реЗ рдЕрднреА рднреА рджрд┐рд▓ рднрд░ рдХреЗ рдкреНрдпрд╛рд░ рдХрд░рддрд╛ рд╣реВрдВред
рдЖрдк рдореЗрд░реА рджреБрдирд┐рдпрд╛ рд╣реИрдВ...
ЁЯЩП рдореИрдВрдиреЗ рдХреА рдЧрдИ рд╕рднреА рдЧрд▓рддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдореИрдВ рджрд┐рд▓ рд╕реЗ рдорд╛рдлреА рдорд╛рдВрдЧрддрд╛ рд╣реВрдВред
рдореИрдВ рдЖрдкрдХреА рдЦреБрд╢реА рдореЗрдВ рдЦреБрд╢реА рдордирд╛рддрд╛ рд╣реВрдВ...
ЁЯХпя╕П рдореИрдВ рдЖрдкрд╕реЗ рдЗрддрдирд╛ рдкреНрдпрд╛рд░ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ...
ЁЯТЦ рдореИрдВ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ рдХрд┐ рдПрдХ рджрд┐рди рдЖрдк рд╡рд╛рдкрд╕ рдЖрдПрдВ...

рдореЗрд░реЗ рдкреВрд░реЗ рджрд┐рд▓ рд╕реЗ,
рдЖрдкрдХрд╛ рд╣рдореЗрд╢рд╛ рдХрд╛ рдкреНрдпрд╛рд░ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдкрддрд┐ ЁЯТСЁЯСлЁЯТНЁЯТЦтЬитЭдя╕ПЁЯМ╣ЁЯМЩЁЯХКя╕ПЁЯТМ`
      },
      es: {
        headerSubtitle: "Una historia de amor escrita en las estrellas тЬи",
        timerSubtitle: "ЁЯХ░я╕П Tiempo desde que mi coraz├│n comenz├│ a esperarte",
        letterTitle: "ЁЯТМ Haz clic en la carta ЁЯТМ",
        letterHeader: "ЁЯТЦ Carta desde mi coraz├│n ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ Nuestros hermosos recuerdos",
        uploadTitle: "ЁЯУ╖ Agregar m├бs recuerdos",
        uploadSubtitle: "Comparte m├бs momentos hermosos con nosotros",
        uploadBtnText: "Subir fotos",
        footerText: "тЬи Hecho con infinito тЭдя╕П тАФ Esperar├й un d├нa m├бs que para siempre. тЬи",
        letterText: `ЁЯР╝ЁЯжЬЁЯМ╣ Todav├нa te amo con todo mi coraz├│n.
Eres mi mundo...
ЁЯЩП Me disculpo de coraz├│n por todos los errores que he cometido.
Me alegro en tu felicidad...
ЁЯХпя╕П Puedo amarte tanto...
ЁЯТЦ Quiero que un d├нa regreses...

Con todo mi coraz├│n,
Tu esposo que te ama para siempre ЁЯТСЁЯСлЁЯТНЁЯТЦтЬитЭдя╕ПЁЯМ╣ЁЯМЩЁЯХКя╕ПЁЯТМ`
      },
      fr: {
        headerSubtitle: "Une histoire d'amour ├йcrite dans les ├йtoiles тЬи",
        timerSubtitle: "ЁЯХ░я╕П Temps ├йcoul├й depuis que mon c┼Уur a commenc├й ├а t'attendre",
        calculatorTitle: "ЁЯТХ Calculateur d'Amour ЁЯТХ",
        quotesTitle: "ЁЯТн Citations d'Amour ЁЯТн",
        letterTitle: "ЁЯТМ Cliquez sur la lettre ЁЯТМ",
        letterHeader: "ЁЯТЦ Lettre de mon c┼Уur ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ Nos beaux souvenirs",
        uploadTitle: "ЁЯУ╖ Ajouter plus de souvenirs",
        uploadSubtitle: "Partagez plus de beaux moments avec nous",
        uploadBtnText: "T├йl├йcharger des photos",
        footerText: "тЬи Fait avec un amour infini тЭдя╕П тАФ J'attendrai un jour de plus que pour toujours. тЬи",
        letterText: `ЁЯР╝ЁЯжЬЁЯМ╣ Je t'aime encore de tout mon c┼Уur.
Tu es mon monde...
ЁЯЩП Je m'excuse de tout c┼Уur pour toutes les erreurs que j'ai commises.
Je me r├йjouis de ton bonheur...
ЁЯХпя╕П Je peux t'aimer tant...
ЁЯТЦ Je veux qu'un jour tu reviennes...

De tout mon c┼Уur,
Ton mari qui t'aime pour toujours ЁЯТСЁЯСлЁЯТНЁЯТЦтЬитЭдя╕ПЁЯМ╣ЁЯМЩЁЯХКя╕ПЁЯТМ`
      },
      zh: {
        headerSubtitle: "хЖЩхЬицШЯцШЯщЗМчЪДчИ▒цГЕцХЕф║Л тЬи",
        timerSubtitle: "ЁЯХ░я╕П цИСчЪДх┐Гх╝АхзЛчнЙх╛Еф╜ачЪДцЧ╢щЧ┤",
        calculatorTitle: "ЁЯТХ чИ▒цГЕшобчоЧхЩи ЁЯТХ",
        quotesTitle: "ЁЯТн чИ▒цГЕхРНшиА ЁЯТн",
        letterTitle: "ЁЯТМ чВ╣хЗ╗ф┐бф╗╢ ЁЯТМ",
        letterHeader: "ЁЯТЦ цЭешЗкцИСхЖЕх┐ГчЪДф┐б ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ цИСф╗мч╛Охе╜чЪДхЫЮх┐Ж",
        uploadTitle: "ЁЯУ╖ ц╖╗хКацЫ┤хдЪхЫЮх┐Ж",
        uploadSubtitle: "ф╕ОцИСф╗мхИЖф║лцЫ┤хдЪч╛Охе╜цЧ╢хИ╗",
        uploadBtnText: "ф╕Кф╝ачЕзчЙЗ",
        footerText: "тЬи чФицЧащЩРчЪДчИ▒хИ╢ф╜Ь тЭдя╕П тАФ цИСф╝ЪчнЙх╛ЕцпФц░╕ш┐ЬхдЪф╕АхдйуАВ тЬи",
        letterText: `ЁЯР╝ЁЯжЬЁЯМ╣ цИСф╗НчД╢хЕих┐ГхЕицДПхЬ░чИ▒чЭАф╜ауАВ
ф╜ацШпцИСчЪДф╕ЦчХМ...
ЁЯЩП цИСф╕║цИСчКпф╕ЛчЪДцЙАцЬЙщФЩшппц╖▒шбицнЙцДПуАВ
цИСф╕║ф╜ачЪДх╣╕чжПшАМщлШхЕ┤...
ЁЯХпя╕П цИСхПпф╗ехжВцндчИ▒ф╜а...
ЁЯТЦ цИСх╕МцЬЫцЬЙф╕Ахдйф╜ахЫЮцЭе...

хЕих┐ГхЕицДПхЬ░я╝М
ц░╕ш┐ЬчИ▒ф╜ачЪДф╕Ихдл ЁЯТСЁЯСлЁЯТНЁЯТЦтЬитЭдя╕ПЁЯМ╣ЁЯМЩЁЯХКя╕ПЁЯТМ`
      },
      ja: {
        headerSubtitle: "цШЯуБлцЫ╕уБЛуВМуБЯцДЫуБочЙйшкЮ тЬи",
        timerSubtitle: "ЁЯХ░я╕П чзБуБох┐ГуБМуБВуБкуБЯуВТх╛ЕуБбхзЛуВБуБжуБЛуВЙуБоцЩВщЦУ",
        calculatorTitle: "ЁЯТХ цДЫуБошиИчоЧцйЯ ЁЯТХ",
        quotesTitle: "ЁЯТн цДЫуБохРНшиА ЁЯТн",
        letterTitle: "ЁЯТМ цЙЛч┤ЩуВТуВпуГкуГГуВп ЁЯТМ",
        letterHeader: "ЁЯТЦ чзБуБох┐ГуБЛуВЙуБоцЙЛч┤Щ ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ чзБуБЯуБбуБоч╛ОуБЧуБДцАЭуБДхЗ║",
        uploadTitle: "ЁЯУ╖ цАЭуБДхЗ║уВТш┐╜хКа",
        uploadSubtitle: "уВИуВКхдЪуБПуБоч╛ОуБЧуБДчЮмщЦУуВТхЕ▒цЬЙуБЧуБ╛уБЧуВЗуБЖ",
        uploadBtnText: "хЖЩчЬЯуВТуВвуГГуГЧуГнуГ╝уГЙ",
        footerText: "тЬи чДбщЩРуБоцДЫуБзф╜ЬуВЙуВМуБ╛уБЧуБЯ тЭдя╕П тАФ ц░╕щБауВИуВКф╕АцЧещХ╖уБПх╛ЕуБбуБ╛уБЩуАВ тЬи",
        letterText: `ЁЯР╝ЁЯжЬЁЯМ╣ чзБуБпуБ╛уБах┐ГуБЛуВЙуБВуБкуБЯуВТцДЫуБЧуБжуБДуБ╛уБЩуАВ
уБВуБкуБЯуБпчзБуБоф╕ЦчХМуБзуБЩ...
ЁЯЩП чзБуБМчКпуБЧуБЯуБЩуБ╣уБжуБощБОуБбуБлуБдуБДуБжх┐ГуБЛуВЙшмЭч╜куБЧуБ╛уБЩуАВ
чзБуБпуБВуБкуБЯуБох╣╕уБЫуВТхЦЬуБ│уБ╛уБЩ...
ЁЯХпя╕П чзБуБпуБВуБкуБЯуВТуБиуБжуВВцДЫуБЩуВЛуБУуБиуБМуБзуБНуБ╛уБЩ...
ЁЯТЦ чзБуБпуБВуБкуБЯуБМуБДуБдуБЛцИ╗уБгуБжуБПуВЛуБУуБиуВТщбШуБгуБжуБДуБ╛уБЩ...

х┐ГуБЛуВЙуАБ
ц░╕щБауБлуБВуБкуБЯуВТцДЫуБЩуВЛхдл ЁЯТСЁЯСлЁЯТНЁЯТЦтЬитЭдя╕ПЁЯМ╣ЁЯМЩЁЯХКя╕ПЁЯТМ`
      },
      ko: {
        headerSubtitle: "ы│ДьЧР ьУ░ьЧмьзД ьВмыЮС ьЭ┤ьХ╝ъ╕░ тЬи",
        timerSubtitle: "ЁЯХ░я╕П ыВ┤ ызИьЭМьЭ┤ ыЛ╣ьЛаьЭД ъ╕░ыЛдыжмъ╕░ ьЛЬьЮСэХЬ ьЛЬъ░Д",
        calculatorTitle: "ЁЯТХ ьВмыЮС ъ│ДьВ░ъ╕░ ЁЯТХ",
        quotesTitle: "ЁЯТн ьВмыЮС ыкЕьЦ╕ ЁЯТн",
        letterTitle: "ЁЯТМ эО╕ьзАые╝ эБ┤ыжнэХШьД╕ьЪФ ЁЯТМ",
        letterHeader: "ЁЯТЦ ыВ┤ ызИьЭМьЧРьДЬ ьШи эО╕ьзА ЁЯТЦ",
        memoriesTitle: "ЁЯУ╕ ьЪ░ыжмьЭШ ьХДыжДыЛдьЪ┤ ь╢ФьЦ╡",
        uploadTitle: "ЁЯУ╖ ыНФ ызОьЭА ь╢ФьЦ╡ ь╢Фъ░А",
        uploadSubtitle: "ыНФ ызОьЭА ьХДыжДыЛдьЪ┤ ьИЬъ░ДьЭД ъ│╡ьЬаэХШьД╕ьЪФ",
        uploadBtnText: "ьВмьзД ьЧЕыбЬыУЬ",
        footerText: "тЬи ым┤эХЬэХЬ ьВмыЮСьЬ╝ыбЬ ызМыУдьЦ┤ьбМьК╡ыЛИыЛд тЭдя╕П тАФ ьШБьЫРы│┤ыЛд эХШыги ыНФ ъ╕░ыЛдыжмъ▓аьК╡ыЛИыЛд. тЬи",
        letterText: `ЁЯР╝ЁЯжЬЁЯМ╣ ыВШыКФ ьЧмьаДэЮИ ызИьЭМъ╗П ыЛ╣ьЛаьЭД ьВмыЮСэХйыЛИыЛд.
ыЛ╣ьЛаьЭА ыВ┤ ьД╕ъ│ДьЮЕыЛИыЛд...
ЁЯЩП ьаЬъ░А ьаАьзАые╕ ыкиыУа ьЛдьИШьЧР ыМАэХ┤ ызИьЭМьЬ╝ыбЬ ьВмъ│╝ыУЬыж╜ыЛИыЛд.
ыВШыКФ ыЛ╣ьЛаьЭШ эЦЙы│╡ьЭД ъ╕░ы╗РэХйыЛИыЛд...
ЁЯХпя╕П ыВШыКФ ыЛ╣ьЛаьЭД ъ╖╕ыаЗъ▓М ьВмыЮСэХа ьИШ ьЮИьК╡ыЛИыЛд...
ЁЯТЦ ыВШыКФ ыЛ╣ьЛаьЭ┤ ьЦ╕ьааъ░А ыПМьХДьШдъ╕░ые╝ ы░ФыЮНыЛИыЛд...

ызИьЭМьЭД ыЛдэХ┤,
ьШБьЫРэЮИ ыЛ╣ьЛаьЭД ьВмыЮСэХШыКФ ыВиэО╕ ЁЯТСЁЯСлЁЯТНЁЯТЦтЬитЭдя╕ПЁЯМ╣ЁЯМЩЁЯХКя╕ПЁЯТМ`
      }
    };

    let currentLanguage = 'en';

    // Draggable Music Player Variables
    let isMusicDragging = false;
    let musicDragStart = { x: 0, y: 0 };
    let musicOffset = { x: 0, y: 0 };

    // Scroll behavior variables
    let lastScrollTop = 0;
    let scrollTimeout;

    // Love Panda Game Variables
    let gameState = {
      isPlaying: false,
      pandaX: 50,
      pandaY: 50,
      score: 0,
      highScore: localStorage.getItem('pandaGameHighScore') || 0,
      gamesPlayed: localStorage.getItem('pandaGamesPlayed') || 0,
      totalHearts: localStorage.getItem('pandaTotalHearts') || 0
    };

    // Initialize everything when page loads
    window.addEventListener('load', function() {
      console.log('Page loaded, initializing...');
      // Show loading screen with clickable heart
      const loading = document.getElementById('loading');
      const loadingHeart = document.getElementById('loadingHeart');
      console.log('Loading element:', loading);
      console.log('Loading heart element:', loadingHeart);
      loading.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      
      // Initialize theme button state
      const themeToggle = document.querySelector('.theme-toggle');
      themeToggle.classList.add('language-closed');
      
      // Initialize scroll behavior for language button
      initializeScrollBehavior();
      
      // Initialize draggable music player
      initializeDraggableMusic();
      
      // Initialize love panda game
      initializeLovePandaGame();
      
      // Mobile-specific optimizations
      if (window.innerWidth <= 768) {
        // Reduce particle count on mobile for better performance
        if (typeof particlesJS !== 'undefined') {
          particlesJS('particles-js', {
            particles: {
              number: {
                value: 40, // Reduced from 80
                density: {
                  enable: true,
                  value_area: 800
                }
              },
              color: {
                value: ['#ff6b9d', '#27ae60', '#e74c3c', '#f39c12']
              },
              shape: {
                type: 'circle'
              },
              opacity: {
                value: 0.3, // Reduced opacity
                random: false
              },
              size: {
                value: 2, // Smaller particles
                random: true
              },
              line_linked: {
                enable: false // Disable lines on mobile for better performance
              },
              move: {
                enable: true,
                speed: 1, // Slower movement
                direction: 'none',
                random: false,
                straight: false,
                out_mode: 'out',
                bounce: false
              }
            },
            interactivity: {
              detect_on: 'canvas',
              events: {
                onhover: {
                  enable: false // Disable hover effects on mobile
                },
                onclick: {
                  enable: false // Disable click effects on mobile
                },
                resize: true
              }
            },
            retina_detect: true
          });
        }
        
        // Reduce floating elements frequency on mobile
        setInterval(() => {
          const container = document.getElementById('floatingElements');
          if (container.children.length < 5) { // Limit to 5 elements max
            const elements = [
              { emoji: 'ЁЯР╝', class: 'panda' },
              { emoji: 'ЁЯжЬ', class: 'parrot' },
              { emoji: 'ЁЯМ╣', class: 'rose' },
              { emoji: 'ЁЯТЦ', class: 'heart' }
            ];
            
            const element = elements[Math.floor(Math.random() * elements.length)];
            const div = document.createElement('div');
            div.className = `floating-item ${element.class}`;
            div.textContent = element.emoji;
            div.style.left = Math.random() * 100 + '%';
            div.style.animationDuration = '6s';
            container.appendChild(div);
            
            setTimeout(() => {
              div.remove();
            }, 6000);
          }
        }, 800); // Slower frequency
      }

      // Apply preferred language from URL or localStorage
      try {
        const params = new URLSearchParams(window.location.search);
        let preferredLang = params.get('lang') || localStorage.getItem('lang') || 'en';
        if (!translations[preferredLang]) preferredLang = 'en';
        changeLanguage(null, preferredLang);
        localStorage.setItem('lang', preferredLang);
      } catch (e) {}

      loadingHeart.addEventListener('mouseenter', function() {
        loadingHeart.style.transform = 'scale(1.2)';
      });
      loadingHeart.addEventListener('mouseleave', function() {
        loadingHeart.style.transform = 'scale(1)';
      });
      loadingHeart.addEventListener('click', function() {
        console.log('Loading heart clicked via event listener!');
        loading.style.display = 'none';
        document.body.style.overflow = '';
        // Play music and initialize after heart click
        initializeMusic();
        createFloatingElements();
        startTimer();
        initializePhotoUpload();
        initParticles();
        updateQuote();
        setInterval(updateQuote, 30000);
      }, { once: true });
    });

    // Create floating elements animation
    function createFloatingElements() {
      const container = document.getElementById('floatingElements');
      const elements = [
        { emoji: 'ЁЯР╝', class: 'panda' },
        { emoji: 'ЁЯжЬ', class: 'parrot' },
        { emoji: 'ЁЯМ╣', class: 'rose' },
        { emoji: 'ЁЯТЦ', class: 'heart' },
        { emoji: 'ЁЯТХ', class: 'heart' },
        { emoji: 'ЁЯТЧ', class: 'heart' },
        { emoji: 'ЁЯТУ', class: 'heart' },
        { emoji: 'ЁЯТЭ', class: 'heart' },
        { emoji: 'ЁЯТШ', class: 'heart' }
      ];
      
      setInterval(() => {
        const element = elements[Math.floor(Math.random() * elements.length)];
        const div = document.createElement('div');
        div.className = `floating-item ${element.class}`;
        div.textContent = element.emoji;
        div.style.left = Math.random() * 100 + '%';
        div.style.animationDuration = (Math.random() * 4 + 4) + 's';
        container.appendChild(div);
        
        setTimeout(() => {
          div.remove();
        }, 8000);
      }, 400);
    }

    

    // Theme toggle function
    function toggleTheme() {
      document.body.classList.toggle('dark-mode');
      const themeBtn = document.querySelector('.theme-toggle i');
      if (document.body.classList.contains('dark-mode')) {
        themeBtn.className = 'fas fa-sun';
      } else {
        themeBtn.className = 'fas fa-moon';
      }
    }

    // Love calculator function
    function calculateLove() {
      const name1 = document.getElementById('name1').value.trim();
      const name2 = document.getElementById('name2').value.trim();
      
      if (!name1 || !name2) {
        document.getElementById('loveResult').innerHTML = 'Please enter both names! ЁЯТХ';
        return;
      }
      
      const name1Lower = name1.toLowerCase();
      const name2Lower = name2.toLowerCase();
      const combinedNames = (name1Lower + ' ' + name2Lower);
      const reverseCombined = (name2Lower + ' ' + name1Lower);
      
      // Special rules for Roshan and Anjana (exact match only)
      if ((name1Lower.includes('roshan') && name2Lower.includes('anjana')) ||
          (name1Lower.includes('anjana') && name2Lower.includes('roshan'))) {
        
        // Determine the order based on which name was entered first
        let firstName, secondName, firstCode, secondCode;
        if (name1Lower.includes('roshan')) {
          firstName = name1;
          secondName = name2;
          firstCode = 'AN';
          secondCode = 'A';
        } else {
          firstName = name1;
          secondName = name2;
          firstCode = 'A';
          secondCode = 'AN';
        }
        
        // Special result for Roshan and Anjana - 100% LOVE
        const isMobile = window.innerWidth <= 768;
        const titleSize = isMobile ? '1.8rem' : '2.5rem';
        const subtitleSize = isMobile ? '1.3rem' : '1.8rem';
        const textSize = isMobile ? '1rem' : '1.5rem';
        const smallTextSize = isMobile ? '0.9rem' : '1.2rem';
        
        document.getElementById('loveResult').innerHTML = `
          <div style="font-size: ${titleSize}; color: #ff6b9d; margin-bottom: 15px; animation: pulse 1s ease-in-out infinite;">ЁЯТЦЁЯТЦЁЯТЦ 100% LOVE ЁЯТЦЁЯТЦЁЯТЦ</div>
          <div style="font-size: ${subtitleSize}; color: #f39c12; margin-bottom: 15px; animation: bounce 2s ease-in-out infinite;">ЁЯОЙ CONGRATULATIONS! ЁЯОЙ</div>
          <div style="font-size: ${textSize}; color: #27ae60; margin-bottom: 15px; animation: glow 3s ease-in-out infinite alternate;">ЁЯМЯ PERFECT SOULMATES! ЁЯМЯ</div>
          <div style="font-size: ${smallTextSize}; color: #e74c3c; margin-bottom: 15px; animation: pulse 1.5s ease-in-out infinite;">ЁЯПЖ DESTINED TOGETHER! ЁЯПЖ</div>
          <div style="font-size: ${smallTextSize}; color: #9b59b6; margin-bottom: 15px; animation: glow 2s ease-in-out infinite alternate;">ЁЯТС ETERNAL LOVE STORY! ЁЯТС</div>
          <div style="font-size: ${smallTextSize}; color: #ff6b9d; margin-top: 15px; animation: pulse 1s ease-in-out infinite;">ЁЯР╝ЁЯжЬЁЯМ╣ Forever Together ЁЯМ╣ЁЯжЬЁЯР╝</div>
          <div style="font-size: ${isMobile ? '1.1rem' : '1.4rem'}; color: #e91e63; margin-top: 20px; font-family: 'Dancing Script', cursive; font-weight: 700; animation: glow 3s ease-in-out infinite alternate; line-height: 1.3;">ЁЯМ╕ ${firstName} (${firstCode}) & ${secondName} (${secondCode}) - They are for each other forever together! ЁЯМ╕</div>
          <div style="font-size: ${smallTextSize}; color: #ff9800; margin-top: 10px; font-family: 'Dancing Script', cursive; font-weight: 600; animation: bounce 2s ease-in-out infinite;">ЁЯМ║ Name bloom of flowers - Perfect match! ЁЯМ║</div>
        `;
        
        // Create celebration effect
        createCelebrationEffect();
        return;
      }
      
      // Special rules for Roshan with others (0%) - but not with Anjana
      if ((name1Lower.includes('roshan') || name2Lower.includes('roshan')) && 
          !(name1Lower.includes('anjana') || name2Lower.includes('anjana'))) {
        document.getElementById('loveResult').innerHTML = `
          <div style="font-size: 2rem; color: #e74c3c; margin-bottom: 10px;">ЁЯТФ 0% LOVE ЁЯТФ</div>
          <div style="font-size: 1.3rem; color: #8e44ad; margin-bottom: 10px;">ЁЯШЮ Roshan's heart belongs to someone special</div>
          <div style="font-size: 1.1rem; color: #f39c12;">ЁЯТЦ True love waits for the right person</div>
        `;
        return;
      }
      
      // Special rules for Anjana with others (0%) - but not with Roshan
      if ((name1Lower.includes('anjana') || name2Lower.includes('anjana')) && 
          !(name1Lower.includes('roshan') || name2Lower.includes('roshan'))) {
        document.getElementById('loveResult').innerHTML = `
          <div style="font-size: 2rem; color: #e74c3c; margin-bottom: 10px;">ЁЯТФ 0% LOVE ЁЯТФ</div>
          <div style="font-size: 1.3rem; color: #8e44ad; margin-bottom: 10px;">ЁЯШЮ Anjana's heart belongs to someone special</div>
          <div style="font-size: 1.1rem; color: #f39c12;">ЁЯТЦ True love waits for the right person</div>
        `;
        return;
      }
      
      // Special rules for "Anjan" (without 'a') - always 0% with anyone
      if (name1Lower.includes('anjan') || name2Lower.includes('anjan')) {
        document.getElementById('loveResult').innerHTML = `
          <div style="font-size: 2rem; color: #e74c3c; margin-bottom: 10px;">ЁЯТФ 0% LOVE ЁЯТФ</div>
          <div style="font-size: 1.3rem; color: #8e44ad; margin-bottom: 10px;">ЁЯШЮ Sorry, this name doesn't match perfectly</div>
          <div style="font-size: 1.1rem; color: #f39c12;">ЁЯТЦ Try the correct spelling for true love</div>
        `;
        return;
      }
      
      // Special case for Koila (100% - crazy love)
      if (name1Lower.includes('koila') || name2Lower.includes('koila')) {
        const isMobile = window.innerWidth <= 768;
        const titleSize = isMobile ? '1.8rem' : '2.5rem';
        const subtitleSize = isMobile ? '1.3rem' : '1.8rem';
        const textSize = isMobile ? '1rem' : '1.5rem';
        const smallTextSize = isMobile ? '0.9rem' : '1.3rem';
        
        document.getElementById('loveResult').innerHTML = `
          <div style="font-size: ${titleSize}; color: #ff6b9d; margin-bottom: 15px; animation: pulse 1s ease-in-out infinite;">ЁЯТЦЁЯТЦЁЯТЦ 100% LOVE ЁЯТЦЁЯТЦЁЯТЦ</div>
          <div style="font-size: ${subtitleSize}; color: #f39c12; margin-bottom: 15px;">ЁЯдк KOILA KOILE PAGAL PAGALNI! ЁЯдк</div>
          <div style="font-size: ${textSize}; color: #27ae60; margin-bottom: 15px;">ЁЯШН CRAZY IN LOVE! ЁЯШН</div>
          <div style="font-size: ${smallTextSize}; color: #e74c3c; margin-bottom: 15px;">ЁЯОн LOVE MAKES US CRAZY! ЁЯОн</div>
          <div style="font-size: ${smallTextSize}; color: #9b59b6;">ЁЯТХ Madly in love with each other! ЁЯТХ</div>
        `;
        
        // Create celebration effect
        createCelebrationEffect();
        return;
      }
      
      // Regular love calculation algorithm for other names
      const combined = (name1 + name2).toLowerCase();
      let loveScore = 0;
      
      // Calculate based on character codes and length
      for (let i = 0; i < combined.length; i++) {
        loveScore += combined.charCodeAt(i);
      }
      
      // Add some randomness and make it more realistic
      loveScore = (loveScore * 0.7 + Math.random() * 30) % 100;
      loveScore = Math.floor(loveScore);
      
      // Ensure minimum and maximum bounds
      loveScore = Math.max(5, Math.min(95, loveScore));
      
      let result = '';
      let emoji = '';
      let motivation = '';
      
      if (loveScore >= 90) {
        result = 'Soulmates! ЁЯТС';
        emoji = 'ЁЯТЦЁЯТЦЁЯТЦ';
        motivation = 'ЁЯМЯ You are meant to be together! True love found! ЁЯМЯ';
      } else if (loveScore >= 80) {
        result = 'Perfect Match! ЁЯТХ';
        emoji = 'ЁЯТЦЁЯТЦ';
        motivation = 'тЬи Amazing compatibility! Love is in the air! тЬи';
      } else if (loveScore >= 70) {
        result = 'Great Love! ЁЯТЧ';
        emoji = 'ЁЯТЦЁЯТЦ';
        motivation = 'ЁЯТХ Strong connection! Your hearts beat as one! ЁЯТХ';
      } else if (loveScore >= 60) {
        result = 'Good Potential! ЁЯТЭ';
        emoji = 'ЁЯТЦ';
        motivation = 'ЁЯМ╣ Beautiful love story waiting to unfold! ЁЯМ╣';
      } else if (loveScore >= 50) {
        result = 'Nice Chemistry! ЁЯТШ';
        emoji = 'ЁЯТЦ';
        motivation = 'ЁЯТл Love can grow stronger with time! ЁЯТл';
      } else if (loveScore >= 40) {
        result = 'Friendship First! ЁЯМ╕';
        emoji = 'ЁЯМ╕';
        motivation = 'ЁЯМ║ Great friendship is the foundation of love! ЁЯМ║';
      } else if (loveScore >= 30) {
        result = 'Getting to Know! ЁЯМ╝';
        emoji = 'ЁЯМ╝';
        motivation = 'ЁЯМ╗ Take time to understand each other better! ЁЯМ╗';
      } else if (loveScore >= 20) {
        result = 'New Beginning! ЁЯМ▒';
        emoji = 'ЁЯМ▒';
        motivation = 'ЁЯМ┐ Every love story starts with a single step! ЁЯМ┐';
      } else {
        result = 'Fresh Start! ЁЯМ╕';
        emoji = 'ЁЯМ╕';
        motivation = 'ЁЯМ╖ Love is a journey, not a destination! ЁЯМ╖';
      }
      
      const isMobile = window.innerWidth <= 768;
      const mainSize = isMobile ? '1.4rem' : '1.8rem';
      const resultSize = isMobile ? '1.1rem' : '1.3rem';
      const motivationSize = isMobile ? '1rem' : '1.1rem';
      
      document.getElementById('loveResult').innerHTML = `
        <div style="font-size: ${mainSize}; color: #ff6b9d; margin-bottom: 10px; line-height: 1.3;">${name1} + ${name2} = ${loveScore}% Love ${emoji}</div>
        <div style="font-size: ${resultSize}; color: #f39c12; margin-bottom: 10px;">${result}</div>
        <div style="font-size: ${motivationSize}; color: #27ae60; font-style: italic; line-height: 1.4;">${motivation}</div>
      `;
    }

    // Celebration effect for special couple
    function createCelebrationEffect() {
      const isMobile = window.innerWidth <= 768;
      const effectCount = isMobile ? 10 : 20; // Reduce effects on mobile
      
      // Create fireworks effect
      for (let i = 0; i < effectCount; i++) {
        setTimeout(() => {
          const firework = document.createElement('div');
          firework.innerHTML = 'ЁЯОЖ';
          firework.style.position = 'fixed';
          firework.style.left = Math.random() * window.innerWidth + 'px';
          firework.style.top = Math.random() * window.innerHeight + 'px';
          firework.style.fontSize = '2rem';
          firework.style.zIndex = '9999';
          firework.style.pointerEvents = 'none';
          firework.style.animation = 'fadeOut 2s ease-out forwards';
          document.body.appendChild(firework);
          
          setTimeout(() => {
            firework.remove();
          }, 2000);
        }, i * 100);
      }
      
      // Create flower bloom effect
      const flowerCount = isMobile ? 15 : 30; // Reduce flowers on mobile
      for (let i = 0; i < flowerCount; i++) {
        setTimeout(() => {
          const flower = document.createElement('div');
          flower.innerHTML = ['ЁЯМ╕', 'ЁЯМ║', 'ЁЯМ╗', 'ЁЯМ╖', 'ЁЯМ╣', 'ЁЯМ╝', 'ЁЯМ┐', 'ЁЯНА', 'ЁЯМ▒', 'ЁЯМ╛'][Math.floor(Math.random() * 10)];
          flower.style.position = 'fixed';
          flower.style.left = Math.random() * window.innerWidth + 'px';
          flower.style.top = Math.random() * window.innerHeight + 'px';
          flower.style.fontSize = '2.5rem';
          flower.style.zIndex = '9997';
          flower.style.pointerEvents = 'none';
          flower.style.animation = 'flowerBloom 2s ease-out forwards';
          document.body.appendChild(flower);
          
          setTimeout(() => {
            flower.remove();
          }, 2000);
        }, i * 80);
      }
      
      // Create floating hearts and flowers
      const floatingCount = isMobile ? 20 : 40; // Reduce floating elements on mobile
      for (let i = 0; i < floatingCount; i++) {
        setTimeout(() => {
          const floating = document.createElement('div');
          floating.innerHTML = ['ЁЯТЦ', 'ЁЯТХ', 'ЁЯТЧ', 'ЁЯТУ', 'ЁЯТЭ', 'ЁЯТШ', 'ЁЯМ╣', 'тЬи', 'ЁЯОЙ', 'ЁЯПЖ', 'ЁЯМ╕', 'ЁЯМ║', 'ЁЯМ╗', 'ЁЯМ╖'][Math.floor(Math.random() * 14)];
          floating.style.position = 'fixed';
          floating.style.left = Math.random() * window.innerWidth + 'px';
          floating.style.bottom = '-50px';
          floating.style.fontSize = '1.8rem';
          floating.style.zIndex = '9996';
          floating.style.pointerEvents = 'none';
          floating.style.animation = 'floatUp 4s ease-out forwards';
          document.body.appendChild(floating);
          
          setTimeout(() => {
            floating.remove();
          }, 4000);
        }, i * 60);
      }
      
      // Create confetti effect
      const confettiCount = isMobile ? 25 : 50; // Reduce confetti on mobile
      for (let i = 0; i < confettiCount; i++) {
        setTimeout(() => {
          const confetti = document.createElement('div');
          confetti.innerHTML = ['ЁЯТЦ', 'ЁЯТХ', 'ЁЯТЧ', 'ЁЯТУ', 'ЁЯТЭ', 'ЁЯТШ', 'ЁЯМ╣', 'тЬи', 'ЁЯОЙ', 'ЁЯПЖ'][Math.floor(Math.random() * 10)];
          confetti.style.position = 'fixed';
          confetti.style.left = Math.random() * window.innerWidth + 'px';
          confetti.style.top = '-50px';
          confetti.style.fontSize = '1.5rem';
          confetti.style.zIndex = '9998';
          confetti.style.pointerEvents = 'none';
          confetti.style.animation = 'fallDown 3s ease-in forwards';
          document.body.appendChild(confetti);
          
          setTimeout(() => {
            confetti.remove();
          }, 3000);
        }, i * 50);
      }
    }

    // Love quotes
    const loveQuotes = [
      {
        text: `I loved with all my heart тЭдя╕П
Though the pain tore me apart ЁЯТФ
In the darkness, I fought to stay ЁЯМС
But the shadows took me away ЁЯМля╕П

I wished for light, for hope, for peace тЬиЁЯХКя╕П
A chance for all this pain to cease ЁЯШЮ
To those I loved, please understand ЁЯлВ
My struggle was more than you planned тЪб

If my journey ends too soon ЁЯМа
Look for me in the stars and moon ЁЯМЯЁЯМЩ
Remember me with love, not pain ЁЯХпя╕П
Until we meet in skies again тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `My heart was full of love тЭдя╕П
Yet pain tore me like a dove ЁЯТФ
In shadows deep, I tried to fight ЁЯМС
But darkness claimed my fading light ЁЯМля╕П

I longed for peace, a gentle sigh тЬиЁЯХКя╕П
To lift me softly to the sky ЁЯШЮ
Please know my pain was real and true ЁЯлВ
My fight was more than you knew тЪб

If I leave before my time ЁЯМа
Find me where the stars still shine ЁЯМЯЁЯМЩ
Hold me close with tender grace ЁЯХпя╕П
Until we meet in that safe place тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `I gave my love, my all, my soul тЭдя╕П
Though pain within took its toll ЁЯТФ
In darkest night, I tried to stay ЁЯМС
But shadows pulled my light away ЁЯМля╕П

I dreamed of hope, of brighter days тЬиЁЯХКя╕П
To end this ever-weary haze ЁЯШЮ
To those I love, please understand ЁЯлВ
My struggle was more than planned тЪб

If I go too soon from here ЁЯМа
Look for me in skies so clear ЁЯМЯЁЯМЩ
Remember me with love and light ЁЯХпя╕П
Until we reunite one night тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `With all my heart, I loved so true тЭдя╕П
But pain inside just grew and grew ЁЯТФ
In shadows deep, I tried to stand ЁЯМС
But darkness took me by the hand ЁЯМля╕П

I wished for peace, for calm and rest тЬиЁЯХКя╕П
To free my soul and heal my chest ЁЯШЮ
Please understand my silent fight ЁЯлВ
My pain was hidden out of sight тЪб

If I leave before my day ЁЯМа
Find me where the stars will stay ЁЯМЯЁЯМЩ
Hold me in your heart's embrace ЁЯХпя╕П
Until we meet in that warm place тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `My heart was full, my love sincere тЭдя╕П
But pain inside was always near ЁЯТФ
In darkest nights, I fought to stay ЁЯМС
But shadows slowly took my way ЁЯМля╕П

I prayed for light, for peace to find тЬиЁЯХКя╕П
To leave this sorrow far behind ЁЯШЮ
Please know my pain was deep and true ЁЯлВ
My battle was more than you knew тЪб

If I leave this world too soon ЁЯМа
Find me beneath the shining moon ЁЯМЯЁЯМЩ
Remember me with love, not grief ЁЯХпя╕П
Until we meet beyond belief тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `I loved with all my heart and soul тЭдя╕П
Though pain inside took its toll ЁЯТФ
In darkest hours, I tried to fight ЁЯМС
But shadows stole away my light ЁЯМля╕П

I wished for peace, for quiet rest тЬиЁЯХКя╕П
To ease the ache inside my chest ЁЯШЮ
To those I loved, please understand ЁЯлВ
My struggle was more than planned тЪб

If my journey ends too soon ЁЯМа
Look for me in stars and moon ЁЯМЯЁЯМЩ
Hold me with love, not despair ЁЯХпя╕П
Until we meet beyond the air тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `My heart was full of boundless love тЭдя╕П
Though pain weighed heavy from above ЁЯТФ
In darkest times, I fought to stay ЁЯМС
But shadows slowly pulled away ЁЯМля╕П

I longed for peace, a gentle light тЬиЁЯХКя╕П
To carry me beyond the night ЁЯШЮ
Please understand my silent pain ЁЯлВ
My battle was more than you'd explain тЪб

If I leave before my time ЁЯМа
Find me where the stars still shine ЁЯМЯЁЯМЩ
Remember me with tender care ЁЯХпя╕П
Until we meet beyond the air тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `I gave my heart, I gave my all тЭдя╕П
Though darkness made me stumble and fall ЁЯТФ
In shadows deep, I tried to stay ЁЯМС
But night would not let me find my way ЁЯМля╕П

I prayed for light, for hope to shine тЬиЁЯХКя╕П
To heal the wounds, to make me fine ЁЯШЮ
Please know my pain was deep and true ЁЯлВ
My fight was more than you ever knew тЪб

If I leave this world too soon ЁЯМа
Find me under the silver moon ЁЯМЯЁЯМЩ
Hold me close with love, not grief ЁЯХпя╕П
Until we find eternal peace тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `With all my heart, I loved so deep тЭдя╕П
Though pain inside would not let me sleep ЁЯТФ
In darkest hours, I fought to stay ЁЯМС
But shadows slowly took me away ЁЯМля╕П

I wished for peace, for gentle rest тЬиЁЯХКя╕П
To free my soul and ease my chest ЁЯШЮ
To those I love, please understand ЁЯлВ
My struggle was more than planned тЪб

If I go before my time ЁЯМа
Look for me in stars that shine ЁЯМЯЁЯМЩ
Remember me with love and light ЁЯХпя╕П
Until we meet beyond the night тШБя╕ПЁЯТл`,
        author: "Roshan SHrestha"
      },
      {
        text: `I loved you with my whole heart тЭдя╕П
Though pain tore my world apart ЁЯТФ
In darkness, I tried to hold on tight ЁЯМС
But shadows pulled me from the light ЁЯМля╕П

I wished for hope, for peace, for calm тЬиЁЯХКя╕П
To heal my soul and ease the harm ЁЯШЮ
Please understand my silent plea ЁЯлВ
My pain was more than you could see тЪб

If I leave this world too soon ЁЯМа
Find me beneath the glowing moon ЁЯМЯЁЯМЩ
Hold me in your heart with care ЁЯХпя╕П
Until we meet beyond the air тШБя╕ПЁЯТл`,
      
author: "Roshan SHrestha"
     }
     ];

    function updateQuote() {
      const randomQuote = loveQuotes[Math.floor(Math.random() * loveQuotes.length)];
      document.getElementById('quoteText').textContent = randomQuote.text;
      document.getElementById('quoteAuthor').textContent = `- ${randomQuote.author}`;
    }

    // Photo slideshow
    let currentSlideIndex = 0;
    const slides = document.querySelectorAll('.slideshow-slide');
    const dots = document.querySelectorAll('.slideshow-dot');

    function showSlide(n) {
      slides.forEach(slide => slide.classList.remove('active'));
      dots.forEach(dot => dot.classList.remove('active'));
      
      currentSlideIndex = (n - 1 + slides.length) % slides.length;
      slides[currentSlideIndex].classList.add('active');
      dots[currentSlideIndex].classList.add('active');
    }

    function currentSlide(n) {
      showSlide(n);
    }

    function nextSlide() {
      showSlide(currentSlideIndex + 2);
    }

    // Auto-advance slideshow
    setInterval(nextSlide, 5000);

    // Particle system
    function initParticles() {
      if (typeof particlesJS !== 'undefined') {
        particlesJS('particles-js', {
          particles: {
            number: {
              value: 80,
              density: {
                enable: true,
                value_area: 800
              }
            },
            color: {
              value: ['#ff6b9d', '#27ae60', '#e74c3c', '#f39c12']
            },
            shape: {
              type: 'circle'
            },
            opacity: {
              value: 0.5,
              random: false
            },
            size: {
              value: 3,
              random: true
            },
            line_linked: {
              enable: true,
              distance: 150,
              color: '#ff6b9d',
              opacity: 0.4,
              width: 1
            },
            move: {
              enable: true,
              speed: 2,
              direction: 'none',
              random: false,
              straight: false,
              out_mode: 'out',
              bounce: false
            }
          },
          interactivity: {
            detect_on: 'canvas',
            events: {
              onhover: {
                enable: true,
                mode: 'repulse'
              },
              onclick: {
                enable: true,
                mode: 'push'
              },
              resize: true
            }
          },
          retina_detect: true
        });
      }
    }

    // Calendar-accurate difference
    function getCalendarDiff(start, end) {
      let years = end.getFullYear() - start.getFullYear();
      let months = end.getMonth() - start.getMonth();
      let days = end.getDate() - start.getDate();
      let hours = end.getHours() - start.getHours();
      let minutes = end.getMinutes() - start.getMinutes();
      let seconds = end.getSeconds() - start.getSeconds();

      if (seconds < 0) {
        seconds += 60;
        minutes--;
      }
      if (minutes < 0) {
        minutes += 60;
        hours--;
      }
      if (hours < 0) {
        hours += 24;
        days--;
      }
      if (days < 0) {
        // Go to previous month
        let prevMonth = new Date(end.getFullYear(), end.getMonth(), 0);
        days += prevMonth.getDate();
        months--;
      }
      if (months < 0) {
        months += 12;
        years--;
      }
      return { years, months, days, hours, minutes, seconds };
    }

    // Timer functionality with persistent real-time counting
    function startTimer() {
      function getNepalTime() {
        // Use browser's Intl API for real Nepal time
        return new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Kathmandu' }));
      }

      // Fetch timer_start.txt and parse start date
      fetch('timer_start.txt?v=' + Date.now())
        .then(res => res.text())
        .then(text => {
          let startDateStr = null;
          text.split('\n').forEach(line => {
            if (line.startsWith('start=')) startDateStr = line.split('=')[1].trim();
          });
          if (!startDateStr) {
            startDateStr = getNepalTime().toISOString().slice(0, 19);
          }
          let [datePart, timePart] = startDateStr.split('T');
          let [year, month, day] = datePart.split('-').map(Number);
          let [hour, minute, second] = (timePart || '00:00:00').split(':').map(Number);

          // Nepal is UTC+5:45, so create the start date in Nepal time
          const NEPAL_OFFSET_MIN = 5 * 60 + 45;
          const utcTimestamp = Date.UTC(year, month - 1, day, hour, minute, second) - (NEPAL_OFFSET_MIN * 60 * 1000);
          const startNepalTime = new Date(utcTimestamp);

          function startAccurateTimer(startNepalTime) {
            function updateTimer() {
              const now = getNepalTime();
              let diff = getCalendarDiff(startNepalTime, now);
              if (
                diff.years < 0 ||
                diff.months < 0 ||
                diff.days < 0 ||
                diff.hours < 0 ||
                diff.minutes < 0 ||
                diff.seconds < 0
              ) {
                diff = { years: 0, months: 0, days: 0, hours: 0, minutes: 0, seconds: 0 };
              } else {
                // Increment seconds by 1 to match the real clock
                diff.seconds += 1;
                if (diff.seconds === 60) {
                  diff.seconds = 0;
                  diff.minutes += 1;
                  if (diff.minutes === 60) {
                    diff.minutes = 0;
                    diff.hours += 1;
                    if (diff.hours === 24) {
                      diff.hours = 0;
                      diff.days += 1;
                      // Optionally, normalize days/months/years further if needed
                    }
                  }
                }
              }
              document.getElementById('timer').innerHTML =
                `тП│ ${diff.years} Year ЁЯМЯ ${diff.months} Month ЁЯУЕ ${diff.days} Day тП░ ${diff.hours} Hour ЁЯХР ${diff.minutes} Minute тП▒ ${diff.seconds} Second and counting...`;

              // Calculate ms until the next full second
              const msToNextSecond = 1000 - now.getMilliseconds();
              setTimeout(updateTimer, msToNextSecond);
            }
            updateTimer();
          }

          startAccurateTimer(startNepalTime);
        });
    }

    // Show nickname question modal before letter
    function showLetter() {
      // Play special sound effect for envelope click
      playEnvelopeSound();
      
      // Add special envelope click effect
      createEnvelopeClickEffect();
      
      document.getElementById('nicknameInput').value = '';
      document.getElementById('nicknameError').textContent = '';
      document.getElementById('nicknameModal').style.display = 'block';
      
      // Add breathing animation to nickname modal
      const nicknameContent = document.querySelector('.nickname-modal-content');
      if (nicknameContent) {
        nicknameContent.style.animation = 'nicknameBreathing 2s ease-in-out infinite';
      }
    }

    // Create envelope click effect
    function createEnvelopeClickEffect() {
      const isMobile = window.innerWidth <= 768;
      
      // Create envelope sparkle effect
      for (let i = 0; i < (isMobile ? 5 : 8); i++) {
        setTimeout(() => {
          const sparkle = document.createElement('div');
          sparkle.innerHTML = 'тЬи';
          sparkle.style.position = 'fixed';
          sparkle.style.left = '50%';
          sparkle.style.top = '50%';
          sparkle.style.fontSize = isMobile ? '1.5rem' : '2rem';
          sparkle.style.zIndex = '9999';
          sparkle.style.pointerEvents = 'none';
          sparkle.style.animation = 'envelopeSparkle 1.5s ease-out forwards';
          sparkle.style.transform = 'translate(-50%, -50%)';
          document.body.appendChild(sparkle);
          
          setTimeout(() => {
            sparkle.remove();
          }, 1500);
        }, i * 100);
      }
    }

    // Play envelope sound effect
    function playEnvelopeSound() {
      // Create a simple sound effect using Web Audio API
      try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(1200, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.2);
      } catch (e) {
        // Fallback: just continue without sound
      }
    }

    function closeNicknameModal() {
      const nicknameContent = document.querySelector('.nickname-modal-content');
      if (nicknameContent) {
        nicknameContent.style.animation = '';
      }
      document.getElementById('nicknameModal').style.display = 'none';
    }

    function checkNickname() {
      const input = document.getElementById('nicknameInput').value.trim().toLowerCase();
      if (input === 'koila') {
        // Create celebration effect for correct answer
        createCorrectAnswerEffect();
        
        // Play success sound
        playSuccessSound();
        
        setTimeout(() => {
          closeNicknameModal();
          openLetter();
        }, 1000);
      } else {
        // Create error effect
        createErrorEffect();
        document.getElementById('nicknameError').textContent = 'Remember sweetheart тЭдЁЯТХЁЯМ╣';
      }
    }

    // Create effect for correct answer
    function createCorrectAnswerEffect() {
      const isMobile = window.innerWidth <= 768;
      
      // Create success sparkles
      for (let i = 0; i < (isMobile ? 8 : 12); i++) {
        setTimeout(() => {
          const sparkle = document.createElement('div');
          sparkle.innerHTML = ['тЬи', 'ЁЯМЯ', 'ЁЯТЦ', 'ЁЯОЙ'][Math.floor(Math.random() * 4)];
          sparkle.style.position = 'fixed';
          sparkle.style.left = Math.random() * window.innerWidth + 'px';
          sparkle.style.top = Math.random() * window.innerHeight + 'px';
          sparkle.style.fontSize = isMobile ? '1.5rem' : '2rem';
          sparkle.style.zIndex = '9999';
          sparkle.style.pointerEvents = 'none';
          sparkle.style.animation = 'sparkleEffect 2s ease-out forwards';
          document.body.appendChild(sparkle);
          
          setTimeout(() => {
            sparkle.remove();
          }, 2000);
        }, i * 100);
      }
    }

    // Create effect for wrong answer
    function createErrorEffect() {
      const errorDiv = document.getElementById('nicknameError');
      errorDiv.style.animation = 'shake 0.5s ease-in-out';
      setTimeout(() => {
        errorDiv.style.animation = '';
      }, 500);
    }

    // Play success sound
    function playSuccessSound() {
      try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(523, audioContext.currentTime); // C5
        oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.1); // E5
        oscillator.frequency.setValueAtTime(784, audioContext.currentTime + 0.2); // G5
        
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.4);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.4);
      } catch (e) {
        // Fallback: just continue without sound
      }
    }

    function openLetter() {
      // Create amazing flower and celebration effects
      createLetterOpeningEffects();
      
      const text = translations[currentLanguage].letterText;
      const modal = document.getElementById('letterModal');
      const letterText = document.getElementById('letterText');
      const letterContent = document.querySelector('.letter-content');
      
      // Hide language selector and make music player smaller
      hideControlsForLetter();
      
      // Add special styling to modal for letter opening
      modal.style.display = 'block';
      modal.style.background = 'rgba(0, 0, 0, 0.95)';
      modal.style.backdropFilter = 'blur(20px)';
      
      // Add mobile-specific enhancements
      if (window.innerWidth <= 768) {
        document.body.style.overflow = 'hidden'; // Prevent background scrolling
        letterContent.classList.add('mobile-fullscreen');
      }
      
      // Add breathing animation to letter content
      letterContent.style.animation = 'letterBreathing 3s ease-in-out infinite';
      
      letterText.innerHTML = '';
      let i = 0;
      const typing = setInterval(() => {
        if (i < text.length) {
          letterText.innerHTML += text[i] === '\n' ? '<br>' : text[i];
          i++;
        } else {
          clearInterval(typing);
          // Add final celebration when typing is complete
          setTimeout(() => {
            createLetterCompletionEffects();
          }, 500);
        }
      }, 30); // Slightly faster typing for better experience
    }

    function closeLetter() {
      const modal = document.getElementById('letterModal');
      const letterContent = document.querySelector('.letter-content');
      
      modal.style.display = 'none';
      
      // Restore controls and remove breathing animation
      showControlsAfterLetter();
      letterContent.style.animation = '';
      
      // Restore body overflow for mobile
      if (window.innerWidth <= 768) {
        document.body.style.overflow = '';
        letterContent.classList.remove('mobile-fullscreen');
      }
    }

    // Hide controls when letter is open
    function hideControlsForLetter() {
      // Hide language selector
      const languageSelector = document.getElementById('languageSelector');
      const langToggleBtn = document.querySelector('.lang-toggle-btn');
      if (languageSelector) {
        languageSelector.style.display = 'none';
      }
      if (langToggleBtn) {
        langToggleBtn.style.display = 'none';
      }
      
      // Make music player smaller
      const musicControls = document.querySelector('.music-controls');
      if (musicControls) {
        musicControls.classList.add('letter-mode');
      }
      
      // Hide theme toggle
      const themeToggle = document.querySelector('.theme-toggle');
      if (themeToggle) {
        themeToggle.style.display = 'none';
      }
    }

    // Show controls after letter is closed
    function showControlsAfterLetter() {
      // Show language selector
      const langToggleBtn = document.querySelector('.lang-toggle-btn');
      if (langToggleBtn) {
        langToggleBtn.style.display = 'block';
      }
      
      // Restore music player size
      const musicControls = document.querySelector('.music-controls');
      if (musicControls) {
        musicControls.classList.remove('letter-mode');
      }
      
      // Show theme toggle
      const themeToggle = document.querySelector('.theme-toggle');
      if (themeToggle) {
        themeToggle.style.display = 'block';
      }
    }

    // Create amazing flower effects when letter is opened
    function createLetterOpeningEffects() {
      const isMobile = window.innerWidth <= 768;
      
      // Create flower bloom effect around the screen
      const flowerEmojis = ['ЁЯМ╕', 'ЁЯМ║', 'ЁЯМ╗', 'ЁЯМ╖', 'ЁЯМ╣', 'ЁЯМ╝', 'ЁЯМ┐', 'ЁЯНА', 'ЁЯМ▒', 'ЁЯМ╛', 'ЁЯТР', 'ЁЯП╡я╕П'];
      const heartEmojis = ['ЁЯТЦ', 'ЁЯТХ', 'ЁЯТЧ', 'ЁЯТУ', 'ЁЯТЭ', 'ЁЯТШ', 'ЁЯТЮ', 'ЁЯТЯ'];
      const sparkleEmojis = ['тЬи', 'тнР', 'ЁЯМЯ', 'ЁЯТл', 'тЪб', 'ЁЯФе', 'ЁЯТО', 'ЁЯОЖ'];
      
      // Create initial flower burst
      for (let i = 0; i < (isMobile ? 15 : 25); i++) {
        setTimeout(() => {
          const flower = document.createElement('div');
          flower.innerHTML = flowerEmojis[Math.floor(Math.random() * flowerEmojis.length)];
          flower.style.position = 'fixed';
          flower.style.left = Math.random() * window.innerWidth + 'px';
          flower.style.top = Math.random() * window.innerHeight + 'px';
          flower.style.fontSize = isMobile ? '2rem' : '3rem';
          flower.style.zIndex = '9999';
          flower.style.pointerEvents = 'none';
          flower.style.animation = 'flowerBloom 3s ease-out forwards';
          flower.style.transform = 'scale(0)';
          document.body.appendChild(flower);
          
          setTimeout(() => {
            flower.remove();
          }, 3000);
        }, i * 50);
      }
      
      // Create heart rain effect
      for (let i = 0; i < (isMobile ? 20 : 35); i++) {
        setTimeout(() => {
          const heart = document.createElement('div');
          heart.innerHTML = heartEmojis[Math.floor(Math.random() * heartEmojis.length)];
          heart.style.position = 'fixed';
          heart.style.left = Math.random() * window.innerWidth + 'px';
          heart.style.top = '-50px';
          heart.style.fontSize = isMobile ? '1.5rem' : '2rem';
          heart.style.zIndex = '9998';
          heart.style.pointerEvents = 'none';
          heart.style.animation = 'floatUp 4s ease-out forwards';
          document.body.appendChild(heart);
          
          setTimeout(() => {
            heart.remove();
          }, 4000);
        }, i * 80);
      }
      
      // Create sparkle effects
      for (let i = 0; i < (isMobile ? 12 : 20); i++) {
        setTimeout(() => {
          const sparkle = document.createElement('div');
          sparkle.innerHTML = sparkleEmojis[Math.floor(Math.random() * sparkleEmojis.length)];
          sparkle.style.position = 'fixed';
          sparkle.style.left = Math.random() * window.innerWidth + 'px';
          sparkle.style.top = Math.random() * window.innerHeight + 'px';
          sparkle.style.fontSize = isMobile ? '1.8rem' : '2.5rem';
          sparkle.style.zIndex = '9997';
          sparkle.style.pointerEvents = 'none';
          sparkle.style.animation = 'sparkleEffect 2s ease-in-out infinite';
          document.body.appendChild(sparkle);
          
          setTimeout(() => {
            sparkle.remove();
          }, 4000);
        }, i * 100);
      }
      
      // Create floating petals effect
      for (let i = 0; i < (isMobile ? 8 : 15); i++) {
        setTimeout(() => {
          const petal = document.createElement('div');
          petal.innerHTML = 'ЁЯМ╕';
          petal.style.position = 'fixed';
          petal.style.left = Math.random() * window.innerWidth + 'px';
          petal.style.top = Math.random() * window.innerHeight + 'px';
          petal.style.fontSize = isMobile ? '1.2rem' : '1.8rem';
          petal.style.zIndex = '9996';
          petal.style.pointerEvents = 'none';
          petal.style.animation = 'floatingPetal 6s ease-in-out infinite';
          document.body.appendChild(petal);
          
          setTimeout(() => {
            petal.remove();
          }, 6000);
        }, i * 200);
      }
    }

    // Create completion effects when letter typing is finished
    function createLetterCompletionEffects() {
      const isMobile = window.innerWidth <= 768;
      
      // Create final celebration burst
      for (let i = 0; i < (isMobile ? 10 : 20); i++) {
        setTimeout(() => {
          const celebration = document.createElement('div');
          celebration.innerHTML = ['ЁЯОЙ', 'ЁЯОК', 'ЁЯТЦ', 'тЬи', 'ЁЯМЯ', 'ЁЯТл'][Math.floor(Math.random() * 6)];
          celebration.style.position = 'fixed';
          celebration.style.left = Math.random() * window.innerWidth + 'px';
          celebration.style.top = Math.random() * window.innerHeight + 'px';
          celebration.style.fontSize = isMobile ? '2rem' : '3rem';
          celebration.style.zIndex = '9999';
          celebration.style.pointerEvents = 'none';
          celebration.style.animation = 'celebrationBurst 2s ease-out forwards';
          document.body.appendChild(celebration);
          
          setTimeout(() => {
            celebration.remove();
          }, 2000);
        }, i * 100);
      }
      
      // Create love message floating up
      setTimeout(() => {
        const loveMessage = document.createElement('div');
        loveMessage.innerHTML = 'ЁЯТЦ Love Letter Opened! ЁЯТЦ';
        loveMessage.style.position = 'fixed';
        loveMessage.style.left = '50%';
        loveMessage.style.top = '50%';
        loveMessage.style.transform = 'translate(-50%, -50%)';
        loveMessage.style.fontSize = isMobile ? '1.5rem' : '2rem';
        loveMessage.style.color = '#ff6b9d';
        loveMessage.style.fontWeight = 'bold';
        loveMessage.style.zIndex = '10000';
        loveMessage.style.pointerEvents = 'none';
        loveMessage.style.animation = 'loveMessageFloat 3s ease-out forwards';
        loveMessage.style.textShadow = '2px 2px 4px rgba(0,0,0,0.5)';
        document.body.appendChild(loveMessage);
        
        setTimeout(() => {
          loveMessage.remove();
        }, 3000);
      }, 500);
    }

    // Enhanced Photo modal functionality with zoom and navigation
    let currentImageIndex = 0;
    let currentZoom = 1;
    let isDragging = false;
    let dragStart = { x: 0, y: 0 };
    let imageOffset = { x: 0, y: 0 };

    // Image data for navigation
    const imageData = [
      { src: 'images/000.jpg', title: 'Beautiful Memory' },
      { src: 'images/00001.jpg', title: 'Precious Moment' },
      { src: 'images/00002.jpg', title: 'Love Story' },
      { src: 'images/00098.jpg', title: 'Endless Love' },
      { src: 'images/001.jpg', title: 'Perfect Together' },
      { src: 'images/002.jpg', title: 'Sweet Moments' },
      { src: 'images/003.jpg', title: 'My Everything' },
      { src: 'images/0089.jpg', title: 'Special Memory' }
    ];

    function openPhotoModal(src) {
      // Find the index of the clicked image
      currentImageIndex = imageData.findIndex(img => img.src === src);
      if (currentImageIndex === -1) currentImageIndex = 0;
      
      // Reset zoom and position
      currentZoom = 1;
      imageOffset = { x: 0, y: 0 };
      
      // Update modal content
      updateModalContent();
      
      // Show modal
      document.getElementById('photoModal').style.display = 'block';
      
      // Add event listeners for zoom and drag
      addImageEventListeners();
    }

    function closePhotoModal() {
      document.getElementById('photoModal').style.display = 'none';
      removeImageEventListeners();
    }

    function updateModalContent() {
      const currentImage = imageData[currentImageIndex];
      const modalImage = document.getElementById('modalImage');
      const imageCounter = document.getElementById('imageCounter');
      const imageTitle = document.getElementById('imageTitle');
      
      modalImage.src = currentImage.src;
      imageCounter.textContent = `${currentImageIndex + 1} / ${imageData.length}`;
      imageTitle.textContent = currentImage.title;
      
      // Reset image transform
      modalImage.style.transform = 'translate(0px, 0px) scale(1)';
    }

    // Zoom functions
    function zoomIn() {
      currentZoom = Math.min(currentZoom * 1.2, 5);
      applyTransform();
    }

    function zoomOut() {
      currentZoom = Math.max(currentZoom / 1.2, 0.5);
      applyTransform();
    }

    function resetZoom() {
      currentZoom = 1;
      imageOffset = { x: 0, y: 0 };
      applyTransform();
    }

    function fitToScreen() {
      currentZoom = 1;
      imageOffset = { x: 0, y: 0 };
      applyTransform();
    }

    function applyTransform() {
      const modalImage = document.getElementById('modalImage');
      const imageContainer = document.getElementById('imageContainer');
      
      modalImage.style.transform = `translate(${imageOffset.x}px, ${imageOffset.y}px) scale(${currentZoom})`;
      
      // Add/remove draggable class based on zoom level
      if (currentZoom > 1) {
        imageContainer.classList.add('draggable');
      } else {
        imageContainer.classList.remove('draggable');
        imageContainer.style.cursor = 'default';
      }
    }

    // Navigation functions
    function previousImage() {
      currentImageIndex = (currentImageIndex - 1 + imageData.length) % imageData.length;
      resetZoom();
      updateModalContent();
    }

    function nextImage() {
      currentImageIndex = (currentImageIndex + 1) % imageData.length;
      resetZoom();
      updateModalContent();
    }

    // Mouse wheel zoom
    function handleWheel(e) {
      e.preventDefault();
      const delta = e.deltaY > 0 ? 0.9 : 1.1;
      currentZoom = Math.max(0.5, Math.min(5, currentZoom * delta));
      applyTransform();
    }

    // Enhanced drag functionality for panning zoomed images
    function handleMouseDown(e) {
      if (currentZoom > 1) {
        isDragging = true;
        dragStart.x = e.clientX - imageOffset.x;
        dragStart.y = e.clientY - imageOffset.y;
        document.getElementById('imageContainer').style.cursor = 'grabbing';
        e.preventDefault();
      }
    }

    function handleMouseMove(e) {
      if (isDragging && currentZoom > 1) {
        const newX = e.clientX - dragStart.x;
        const newY = e.clientY - dragStart.y;
        
        // Get image and container dimensions for boundary checking
        const imageContainer = document.getElementById('imageContainer');
        const modalImage = document.getElementById('modalImage');
        const containerRect = imageContainer.getBoundingClientRect();
        const imageRect = modalImage.getBoundingClientRect();
        
        // Calculate boundaries to prevent dragging too far
        const maxOffsetX = Math.max(0, (imageRect.width * currentZoom - containerRect.width) / 2);
        const maxOffsetY = Math.max(0, (imageRect.height * currentZoom - containerRect.height) / 2);
        
        // Constrain movement within boundaries
        imageOffset.x = Math.max(-maxOffsetX, Math.min(maxOffsetX, newX));
        imageOffset.y = Math.max(-maxOffsetY, Math.min(maxOffsetY, newY));
        
        applyTransform();
        e.preventDefault();
      }
    }

    function handleMouseUp(e) {
      if (isDragging) {
        isDragging = false;
        document.getElementById('imageContainer').style.cursor = currentZoom > 1 ? 'grab' : 'default';
        e.preventDefault();
      }
    }

    // Enhanced touch gestures for mobile (zoom and pan)
    let lastTouchDistance = 0;
    let lastTouchCenter = { x: 0, y: 0 };
    let isTouchDragging = false;
    let touchStart = { x: 0, y: 0 };

    function handleTouchStart(e) {
      if (e.touches.length === 1) {
        // Single touch - start panning if zoomed
        if (currentZoom > 1) {
          isTouchDragging = true;
          touchStart.x = e.touches[0].clientX - imageOffset.x;
          touchStart.y = e.touches[0].clientY - imageOffset.y;
        }
      } else if (e.touches.length === 2) {
        // Two touches - start zooming
        isTouchDragging = false;
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        lastTouchDistance = Math.sqrt(
          Math.pow(touch2.clientX - touch1.clientX, 2) +
          Math.pow(touch2.clientY - touch1.clientY, 2)
        );
        lastTouchCenter = {
          x: (touch1.clientX + touch2.clientX) / 2,
          y: (touch1.clientY + touch2.clientY) / 2
        };
      }
    }

    function handleTouchMove(e) {
      e.preventDefault();
      
      if (e.touches.length === 1 && isTouchDragging && currentZoom > 1) {
        // Single touch panning
        const touch = e.touches[0];
        const newX = touch.clientX - touchStart.x;
        const newY = touch.clientY - touchStart.y;
        
        // Get boundaries for touch panning
        const imageContainer = document.getElementById('imageContainer');
        const modalImage = document.getElementById('modalImage');
        const containerRect = imageContainer.getBoundingClientRect();
        const imageRect = modalImage.getBoundingClientRect();
        
        const maxOffsetX = Math.max(0, (imageRect.width * currentZoom - containerRect.width) / 2);
        const maxOffsetY = Math.max(0, (imageRect.height * currentZoom - containerRect.height) / 2);
        
        imageOffset.x = Math.max(-maxOffsetX, Math.min(maxOffsetX, newX));
        imageOffset.y = Math.max(-maxOffsetY, Math.min(maxOffsetY, newY));
        
        applyTransform();
        
      } else if (e.touches.length === 2) {
        // Two touches - zooming
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        const currentDistance = Math.sqrt(
          Math.pow(touch2.clientX - touch1.clientX, 2) +
          Math.pow(touch2.clientY - touch1.clientY, 2)
        );
        
        if (lastTouchDistance > 0) {
          const scale = currentDistance / lastTouchDistance;
          currentZoom = Math.max(0.5, Math.min(5, currentZoom * scale));
          applyTransform();
        }
        
        lastTouchDistance = currentDistance;
      }
    }

    function handleTouchEnd(e) {
      if (e.touches.length === 0) {
        // All touches ended
        isTouchDragging = false;
        lastTouchDistance = 0;
      } else if (e.touches.length === 1) {
        // One touch ended, but another might still be active
        lastTouchDistance = 0;
      }
    }

    // Add event listeners
    function addImageEventListeners() {
      const imageContainer = document.getElementById('imageContainer');
      const modalImage = document.getElementById('modalImage');
      
      imageContainer.addEventListener('wheel', handleWheel, { passive: false });
      imageContainer.addEventListener('mousedown', handleMouseDown);
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      // Touch events
      imageContainer.addEventListener('touchstart', handleTouchStart, { passive: false });
      imageContainer.addEventListener('touchmove', handleTouchMove, { passive: false });
      imageContainer.addEventListener('touchend', handleTouchEnd);
      
      // Keyboard navigation
      document.addEventListener('keydown', handleKeyDown);
    }

    function removeImageEventListeners() {
      const imageContainer = document.getElementById('imageContainer');
      
      imageContainer.removeEventListener('wheel', handleWheel);
      imageContainer.removeEventListener('mousedown', handleMouseDown);
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      
      imageContainer.removeEventListener('touchstart', handleTouchStart);
      imageContainer.removeEventListener('touchmove', handleTouchMove);
      imageContainer.removeEventListener('touchend', handleTouchEnd);
      
      document.removeEventListener('keydown', handleKeyDown);
    }

    // Keyboard navigation
    function handleKeyDown(e) {
      switch(e.key) {
        case 'ArrowLeft':
          previousImage();
          break;
        case 'ArrowRight':
          nextImage();
          break;
        case 'Escape':
          closePhotoModal();
          break;
        case '+':
        case '=':
          zoomIn();
          break;
        case '-':
          zoomOut();
          break;
        case '0':
          resetZoom();
          break;
      }
    }

    // Music functionality
    function initializeMusic() {
      const music = document.getElementById('bgMusic');
      const toggleBtn = document.getElementById('musicToggle');
      const volumeSlider = document.getElementById('volumeControl');
      const prevBtn = document.getElementById('prevTrackBtn');
      const nextBtn = document.getElementById('nextTrackBtn');
      const trackTitle = document.getElementById('currentTrackTitle');
      // Hardcoded music tracks for static hosting (GitHub Pages compatible)
      let musicTracks = [
        { src: 'music/7%20years.mp3', title: '7 Years' },
        { src: 'music/Par%20khe%20ra%20.mp3', title: 'Par khe ra' },
        { src: 'music/Thu%20Hea%20Kha.mp3', title: 'Thu Hea Kha' }
      ];
      window.musicTracks = musicTracks;
      window.currentTrackIndex = 0;
      function loadTrack(index, autoPlay = true) {
        if (!musicTracks[index]) {
          trackTitle.textContent = 'No songs found';
          music.src = '';
          return;
        }
        music.src = musicTracks[index].src;
        trackTitle.textContent = musicTracks[index].title;
        music.load();
        localStorage.setItem('lastMusicIndex', index);
        if (autoPlay) {
          music.play().catch(()=>{});
        }
      }
      // Set initial volume
      music.volume = 0.5;
      // Volume control
      volumeSlider.addEventListener('input', function() {
        music.volume = this.value;
      });
      // Update icon based on music state
      function updateMusicIcon() {
        if (music.paused) {
          toggleBtn.innerHTML = '<i class="fas fa-play"></i>';
        } else {
          toggleBtn.innerHTML = '<i class="fas fa-pause"></i>';
        }
        if (window.musicTracks && window.currentTrackIndex !== undefined && window.musicTracks[window.currentTrackIndex]) {
          trackTitle.textContent = window.musicTracks[window.currentTrackIndex].title;
        } else {
          trackTitle.textContent = 'No songs found';
        }
      }
      // Listen for play/pause events to update icon
      music.addEventListener('play', updateMusicIcon);
      music.addEventListener('pause', updateMusicIcon);
      // Next/Prev track
      window.playNextTrack = function() {
        if (!musicTracks.length) return;
        window.currentTrackIndex = (window.currentTrackIndex + 1) % musicTracks.length;
        loadTrack(window.currentTrackIndex, true);
        updateMusicIcon();
      };
      window.playPrevTrack = function() {
        if (!musicTracks.length) return;
        window.currentTrackIndex = (window.currentTrackIndex - 1 + musicTracks.length) % musicTracks.length;
        loadTrack(window.currentTrackIndex, true);
        updateMusicIcon();
      };
      // Initial icon and track (pick random on each load)
      if (musicTracks.length > 0) {
        window.currentTrackIndex = Math.floor(Math.random() * musicTracks.length);
        loadTrack(window.currentTrackIndex, true);
        updateMusicIcon();
      } else {
        trackTitle.textContent = 'No songs found';
      }
    }

    // Single button to play/pause music
    function toggleMusicPlayPause() {
      const music = document.getElementById('bgMusic');
      const toggleBtn = document.getElementById('musicToggle');
      if (music.paused) {
        music.play().then(() => {
          toggleBtn.innerHTML = '<i class=\'fas fa-pause\'></i>';
        });
      } else {
        music.pause();
        toggleBtn.innerHTML = '<i class=\'fas fa-play\'></i>';
      }
      // Always update the song title
      const trackTitle = document.getElementById('currentTrackTitle');
      if (window.currentTrackIndex !== undefined && window.musicTracks) {
        trackTitle.textContent = window.musicTracks[window.currentTrackIndex].title;
      }
    }

    // Called by overlay button
    function playMusicFromOverlay() {
      const music = document.getElementById('bgMusic');
      const musicOverlay = document.getElementById('musicOverlay');
      music.play().then(() => {
        musicOverlay.style.display = 'none';
      });
    }

    // Photo upload functionality
    function initializePhotoUpload() {
      document.getElementById('photoInput').addEventListener('change', function(e) {
        const grid = document.getElementById('photoGrid');
        const files = Array.from(e.target.files);
        
        files.forEach(file => {
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(event) {
              const photoItem = document.createElement('div');
              photoItem.className = 'photo-item';
              photoItem.innerHTML = `
                <img src="${event.target.result}" alt="Uploaded Memory" onclick="openPhotoModal('${event.target.result}')">
                <div class="photo-overlay">
                  <h3>New Memory</h3>
                  <p>Added with love</p>
                </div>
              `;
              grid.appendChild(photoItem);
              
              // Add animation
              photoItem.style.opacity = '0';
              photoItem.style.transform = 'scale(0.8)';
              setTimeout(() => {
                photoItem.style.transition = 'all 0.5s ease';
                photoItem.style.opacity = '1';
                photoItem.style.transform = 'scale(1)';
              }, 100);
            };
            reader.readAsDataURL(file);
          }
        });
      });
    }

    // Close modals when clicking outside
    window.addEventListener('click', function(e) {
      const letterModal = document.getElementById('letterModal');
      const photoModal = document.getElementById('photoModal');
      
      if (e.target === letterModal) {
        closeLetter();
      }
      if (e.target === photoModal) {
        closePhotoModal();
      }
    });

    // Add interactive effects
    document.addEventListener('mousemove', function(e) {
      const elements = document.querySelectorAll('.floating-item');
      elements.forEach(element => {
        const rect = element.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        if (Math.abs(x) < 60 && Math.abs(y) < 60) {
          element.style.transform = 'scale(1.8) rotate(10deg)';
        }
      });
    });

    // Sound effects
    function playClickSound() {
      const clickSound = document.getElementById('clickSound');
      clickSound.currentTime = 0;
      clickSound.play().catch(() => {});
    }

    function playHoverSound() {
      const hoverSound = document.getElementById('hoverSound');
      hoverSound.currentTime = 0;
      hoverSound.play().catch(() => {});
    }

    // Add sound effects to interactive elements
    document.addEventListener('DOMContentLoaded', function() {
      const interactiveElements = document.querySelectorAll('button, .envelope, .photo-item, .lang-btn, .theme-toggle');
      interactiveElements.forEach(el => {
        el.addEventListener('click', playClickSound);
        el.addEventListener('mouseenter', playHoverSound);
      });
    });

    // Function to reset timer (for testing purposes)
    function resetTimer() {
      localStorage.removeItem('loveStartTime');
      location.reload();
    }

    // Function to show current Nepal time
    function showNepalTime() {
      function getNepalTime() {
        // Use browser's Intl API for real Nepal time
        return new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Kathmandu' }));
      }
      
      const nepalTime = getNepalTime();
      alert(`Current Nepal Time: ${nepalTime.toLocaleString('en-US', { timeZone: 'Asia/Kathmandu' })}`);
    }

    // Add these functions to window for debugging (optional)
    window.resetTimer = resetTimer;
    window.showNepalTime = showNepalTime;

    // Ensure all translation keys exist for all languages
    const allKeys = [
      'headerSubtitle', 'timerSubtitle', 'calculatorTitle', 'quotesTitle', 'letterTitle', 'letterHeader',
      'memoriesTitle', 'uploadTitle', 'uploadSubtitle', 'uploadBtnText', 'footerText', 'letterText'
    ];
    Object.keys(translations).forEach(lang => {
      allKeys.forEach(key => {
        if (!translations[lang][key]) {
          translations[lang][key] = translations['en'][key] || '';
        }
      });
    });

    // Toggle language selector
    function toggleLanguageSelector() {
      const selector = document.getElementById('languageSelector');
      const themeToggle = document.querySelector('.theme-toggle');
      
      if (selector.style.display === 'none' || selector.style.display === '') {
        // Opening language selector
        selector.style.display = 'flex';
        themeToggle.classList.remove('language-closed');
        themeToggle.classList.add('language-open');
      } else {
        // Closing language selector
        selector.style.display = 'none';
        themeToggle.classList.remove('language-open');
        themeToggle.classList.add('language-closed');
      }
    }

    // Improved language change function
    function changeLanguage(event, lang) {
      currentLanguage = lang;
      const langBtns = document.querySelectorAll('.lang-btn');
      const themeToggle = document.querySelector('.theme-toggle');
      
      langBtns.forEach(btn => btn.classList.remove('active'));
      if (event && event.currentTarget) event.currentTarget.classList.add('active');
      
      // Update all text elements
      allKeys.forEach(key => {
        const el = document.getElementById(key);
        if (el) el.textContent = translations[lang][key];
      });
      
      // Hide selector after choosing and hide theme button
      document.getElementById('languageSelector').style.display = 'none';
      themeToggle.classList.remove('language-open');
      themeToggle.classList.add('language-closed');
      
      // Persist language and reflect in URL
      try {
        localStorage.setItem('lang', lang);
        const url = new URL(window.location);
        url.searchParams.set('lang', lang);
        history.replaceState({}, '', url);
      } catch (e) {}
    }

    // Play music directly from button
    function playMusicDirect() {
      const music = document.getElementById('bgMusic');
      const toggleBtn = document.getElementById('musicToggle');
      music.play().then(() => {
        toggleBtn.innerHTML = '<i class="fas fa-music"></i>';
      });
    }

    // Initialize draggable music player
    function initializeDraggableMusic() {
      const musicControls = document.getElementById('musicControls');
      const dragHandle = document.querySelector('.drag-handle');
      
      // Load saved position
      loadMusicPosition();
      
      // Add event listeners for dragging
      dragHandle.addEventListener('mousedown', handleMusicMouseDown);
      document.addEventListener('mousemove', handleMusicMouseMove);
      document.addEventListener('mouseup', handleMusicMouseUp);
      
      // Touch events for mobile
      dragHandle.addEventListener('touchstart', handleMusicTouchStart, { passive: false });
      document.addEventListener('touchmove', handleMusicTouchMove, { passive: false });
      document.addEventListener('touchend', handleMusicTouchEnd);
    }

    // Mouse events for dragging music player
    function handleMusicMouseDown(e) {
      isMusicDragging = true;
      musicDragStart.x = e.clientX - musicOffset.x;
      musicDragStart.y = e.clientY - musicOffset.y;
      
      const musicControls = document.getElementById('musicControls');
      musicControls.classList.add('dragging');
      e.preventDefault();
    }

    function handleMusicMouseMove(e) {
      if (isMusicDragging) {
        const newX = e.clientX - musicDragStart.x;
        const newY = e.clientY - musicDragStart.y;
        
        // Constrain to viewport
        const musicControls = document.getElementById('musicControls');
        const rect = musicControls.getBoundingClientRect();
        const maxX = window.innerWidth - rect.width;
        const maxY = window.innerHeight - rect.height;
        
        musicOffset.x = Math.max(0, Math.min(maxX, newX));
        musicOffset.y = Math.max(0, Math.min(maxY, newY));
        
        applyMusicPosition();
        e.preventDefault();
      }
    }

    function handleMusicMouseUp(e) {
      if (isMusicDragging) {
        isMusicDragging = false;
        const musicControls = document.getElementById('musicControls');
        musicControls.classList.remove('dragging');
        saveMusicPosition();
        e.preventDefault();
      }
    }

    // Touch events for mobile dragging
    function handleMusicTouchStart(e) {
      if (e.touches.length === 1) {
        isMusicDragging = true;
        musicDragStart.x = e.touches[0].clientX - musicOffset.x;
        musicDragStart.y = e.touches[0].clientY - musicOffset.y;
        
        const musicControls = document.getElementById('musicControls');
        musicControls.classList.add('dragging');
        e.preventDefault();
      }
    }

    function handleMusicTouchMove(e) {
      if (isMusicDragging && e.touches.length === 1) {
        const newX = e.touches[0].clientX - musicDragStart.x;
        const newY = e.touches[0].clientY - musicDragStart.y;
        
        // Constrain to viewport
        const musicControls = document.getElementById('musicControls');
        const rect = musicControls.getBoundingClientRect();
        const maxX = window.innerWidth - rect.width;
        const maxY = window.innerHeight - rect.height;
        
        musicOffset.x = Math.max(0, Math.min(maxX, newX));
        musicOffset.y = Math.max(0, Math.min(maxY, newY));
        
        applyMusicPosition();
        e.preventDefault();
      }
    }

    function handleMusicTouchEnd(e) {
      if (isMusicDragging) {
        isMusicDragging = false;
        const musicControls = document.getElementById('musicControls');
        musicControls.classList.remove('dragging');
        saveMusicPosition();
        e.preventDefault();
      }
    }

    // Apply music player position
    function applyMusicPosition() {
      const musicControls = document.getElementById('musicControls');
      musicControls.style.left = musicOffset.x + 'px';
      musicControls.style.top = musicOffset.y + 'px';
    }

    // Save music player position
    function saveMusicPosition() {
      localStorage.setItem('musicPosition', JSON.stringify(musicOffset));
    }

    // Load music player position
    function loadMusicPosition() {
      const saved = localStorage.getItem('musicPosition');
      if (saved) {
        try {
          musicOffset = JSON.parse(saved);
          applyMusicPosition();
        } catch (e) {
          // Use default position if saved data is invalid
          musicOffset = { x: 20, y: 20 };
        }
      }
    }

    // Initialize scroll behavior for language button
    function initializeScrollBehavior() {
      const langToggleBtn = document.querySelector('.lang-toggle-btn');
      const themeToggleBtn = document.querySelector('.theme-toggle');
      
      window.addEventListener('scroll', function() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        
        // Hide both buttons when scrolling down (instant)
        if (scrollTop > lastScrollTop && scrollTop > 50) {
          langToggleBtn.classList.add('hidden');
          // Force hide theme button by adding hidden class and removing conflicting classes
          themeToggleBtn.classList.add('hidden');
          themeToggleBtn.classList.remove('language-open', 'language-closed');
        }
        // Show both buttons when scrolling up (instant)
        else if (scrollTop < lastScrollTop) {
          langToggleBtn.classList.remove('hidden');
          // Show theme button and restore proper state
          themeToggleBtn.classList.remove('hidden');
          // Check if language selector is open to determine proper state
          const languageSelector = document.getElementById('languageSelector');
          if (languageSelector && languageSelector.style.display === 'flex') {
            themeToggleBtn.classList.add('language-open');
          } else {
            themeToggleBtn.classList.add('language-closed');
          }
        }
        
        // Update last scroll position
        lastScrollTop = scrollTop;
      }, { passive: true });
    }

    // Love Panda Game Functions
    function initializeLovePandaGame() {
      const startBtn = document.getElementById('startGame');
      const resetBtn = document.getElementById('resetGame');
      
      startBtn.addEventListener('click', startGame);
      resetBtn.addEventListener('click', resetGame);
      
      // Keyboard controls
      document.addEventListener('keydown', handleGameKeyPress);
      
      // Update displays
      document.getElementById('highScore').textContent = gameState.highScore;
      document.getElementById('gamesPlayed').textContent = gameState.gamesPlayed;
      document.getElementById('totalHearts').textContent = gameState.totalHearts;
      
      // Place panda at start position
      placePanda();
      placeHeart();
    }

    function startGame() {
      gameState.isPlaying = true;
      gameState.score = 0;
      
      // Hide instructions
      document.getElementById('gameInstructions').style.display = 'none';
      
      // Update UI
      updateGameUI();
      
      // Place heart at random position
      placeHeart();
    }

    function resetGame() {
      gameState.isPlaying = false;
      gameState.score = 0;
      gameState.pandaX = 50;
      gameState.pandaY = 50;
      
      // Show instructions
      document.getElementById('gameInstructions').style.display = 'block';
      
      // Reset positions
      placePanda();
      placeHeart();
      
      // Update UI
      updateGameUI();
    }

    function placePanda() {
      const panda = document.getElementById('panda');
      panda.style.left = gameState.pandaX + 'px';
      panda.style.top = gameState.pandaY + 'px';
    }

    function placeHeart() {
      const heart = document.getElementById('heart');
      const gameBoard = document.getElementById('gameBoard');
      const boardRect = gameBoard.getBoundingClientRect();
      
      // Random position within game board (accounting for element size)
      const maxX = boardRect.width - 60;
      const maxY = boardRect.height - 60;
      
      const x = Math.floor(Math.random() * maxX);
      const y = Math.floor(Math.random() * maxY);
      
      heart.style.left = x + 'px';
      heart.style.top = y + 'px';
    }

    function handleGameKeyPress(e) {
      if (!gameState.isPlaying) {
        if (e.code === 'Space') {
          e.preventDefault();
          startGame();
        }
        return;
      }
      
      const gameBoard = document.getElementById('gameBoard');
      const boardRect = gameBoard.getBoundingClientRect();
      const maxX = boardRect.width - 60;
      const maxY = boardRect.height - 60;
      const moveDistance = 15;
      
      switch(e.code) {
        case 'ArrowUp':
          e.preventDefault();
          gameState.pandaY = Math.max(0, gameState.pandaY - moveDistance);
          break;
        case 'ArrowDown':
          e.preventDefault();
          gameState.pandaY = Math.min(maxY, gameState.pandaY + moveDistance);
          break;
        case 'ArrowLeft':
          e.preventDefault();
          gameState.pandaX = Math.max(0, gameState.pandaX - moveDistance);
          break;
        case 'ArrowRight':
          e.preventDefault();
          gameState.pandaX = Math.min(maxX, gameState.pandaX + moveDistance);
          break;
        case 'Space':
          e.preventDefault();
          if (!gameState.isPlaying) {
            startGame();
          }
          break;
      }
      
      // Update panda position
      placePanda();
      
      // Check collision
      checkCollision();
    }

    function checkCollision() {
      const panda = document.getElementById('panda');
      const heart = document.getElementById('heart');
      
      const pandaRect = panda.getBoundingClientRect();
      const heartRect = heart.getBoundingClientRect();
      
      // Check if panda touches heart
      if (pandaRect.left < heartRect.right &&
          pandaRect.right > heartRect.left &&
          pandaRect.top < heartRect.bottom &&
          pandaRect.bottom > heartRect.top) {
        
        // Collect heart
        gameState.score++;
        gameState.totalHearts++;
        
        // Update UI
        updateGameUI();
        
        // Create collection effect
        createCollectionEffect(heartRect.left, heartRect.top);
        
        // Check win condition
        if (gameState.score >= 10) {
          winGame();
        } else {
          // Place new heart
          placeHeart();
        }
      }
    }

    function createCollectionEffect(x, y) {
      const effect = document.createElement('div');
      effect.textContent = 'ЁЯТЦ';
      effect.style.position = 'fixed';
      effect.style.left = x + 'px';
      effect.style.top = y + 'px';
      effect.style.fontSize = '2rem';
      effect.style.pointerEvents = 'none';
      effect.style.zIndex = '20';
      effect.style.animation = 'collectionEffect 1s ease-out forwards';
      
      document.body.appendChild(effect);
      
      setTimeout(() => {
        effect.remove();
      }, 1000);
    }

    function updateGameUI() {
      document.getElementById('score').textContent = `Hearts Collected: ${gameState.score}`;
      document.getElementById('totalHearts').textContent = gameState.totalHearts;
    }

    function winGame() {
      gameState.isPlaying = false;
      gameState.gamesPlayed++;
      
      // Update high score
      if (gameState.score > gameState.highScore) {
        gameState.highScore = gameState.score;
        localStorage.setItem('pandaGameHighScore', gameState.highScore);
        document.getElementById('highScore').textContent = gameState.highScore;
      }
      
      // Save stats
      localStorage.setItem('pandaGamesPlayed', gameState.gamesPlayed);
      localStorage.setItem('pandaTotalHearts', gameState.totalHearts);
      document.getElementById('gamesPlayed').textContent = gameState.gamesPlayed;
      
      // Show win message
      showWinMessage();
    }

    function showWinMessage() {
      const winModal = document.createElement('div');
      winModal.style.position = 'fixed';
      winModal.style.top = '0';
      winModal.style.left = '0';
      winModal.style.width = '100%';
      winModal.style.height = '100%';
      winModal.style.background = 'rgba(0, 0, 0, 0.8)';
      winModal.style.display = 'flex';
      winModal.style.justifyContent = 'center';
      winModal.style.alignItems = 'center';
      winModal.style.zIndex = '2000';
      winModal.style.backdropFilter = 'blur(10px)';
      
      const winContent = document.createElement('div');
      winContent.style.background = 'linear-gradient(135deg, #fff5f5, #ffe8e8)';
      winContent.style.color = '#333';
      winContent.style.padding = '40px';
      winContent.style.borderRadius = '25px';
      winContent.style.textAlign = 'center';
      winContent.style.maxWidth = '500px';
      winContent.style.boxShadow = '0 25px 70px rgba(0, 0, 0, 0.3)';
      winContent.style.border = '3px solid var(--rose-pink)';
      
      winContent.innerHTML = `
        <h2 style="font-family: 'Great Vibes', cursive; font-size: 3rem; color: var(--rose-red); margin-bottom: 20px;">
          ЁЯОЙ Panda Found True Love! ЁЯТХЁЯР╝
        </h2>
        <p style="font-size: 1.2rem; margin: 10px 0; color: #555;">
          Congratulations! The panda collected 10 hearts and found true love!
        </p>
        <div style="font-size: 2rem; font-weight: 700; color: var(--gold); margin: 20px 0;">
          ЁЯТЦ True Love Achieved! ЁЯТЦ
        </div>
        <p style="font-size: 1.1rem; color: #666; margin-bottom: 30px;">
          The panda's journey to find love is complete! тЭдя╕П
        </p>
        <button class="game-btn" onclick="this.parentElement.parentElement.remove(); resetGame();" style="margin: 10px;">
          ЁЯФД Play Again
        </button>
        <button class="game-btn" onclick="this.parentElement.parentElement.remove();" style="background: #666; margin: 10px;">
          тЭМ Close
        </button>
      `;
      
      winModal.appendChild(winContent);
      document.body.appendChild(winModal);
    }

    // Add CSS animations for game effects
    const style = document.createElement('style');
    style.textContent = `
      @keyframes collectionEffect {
        0% { transform: scale(1); opacity: 1; }
        50% { transform: scale(1.5); opacity: 0.8; }
        100% { transform: scale(0.5) translateY(-50px); opacity: 0; }
      }
      
      @keyframes levelUpEffect {
        0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }
        100% { transform: translate(-50%, -50%) scale(1) translateY(-30px); opacity: 0; }
      }
    `;
    document.head.appendChild(style);
  